// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryAllStatsResponse } from "./types/stwartchain/users/query";
import { QueryGetUniqueUsersResponse } from "./types/stwartchain/users/query";
import { MsgUpdateParams } from "./types/stwartchain/users/tx";
import { Stats } from "./types/stwartchain/users/stats";
import { QueryStatsByDateResponse } from "./types/stwartchain/users/query";
import { QueryGetStatsResponse } from "./types/stwartchain/users/query";
import { Params } from "./types/stwartchain/users/params";
import { UniqueUserAddresses } from "./types/stwartchain/users/unique_user_addresses";
import { QueryAllStatsRequest } from "./types/stwartchain/users/query";
import { QueryStatsByDateRequest } from "./types/stwartchain/users/query";
import { QueryAllUniqueUsersRequest } from "./types/stwartchain/users/query";
import { DailyStats } from "./types/stwartchain/users/daily_stats";
import { UniqueUsers } from "./types/stwartchain/users/unique_users";
import { QueryTotalRequest } from "./types/stwartchain/users/query";
import { GenesisState } from "./types/stwartchain/users/genesis";
import { QueryParamsResponse } from "./types/stwartchain/users/query";
import { QueryGetStatsRequest } from "./types/stwartchain/users/query";
import { TotalUsers } from "./types/stwartchain/users/total_users";
import { QueryParamsRequest } from "./types/stwartchain/users/query";
import { QueryGetUniqueUsersRequest } from "./types/stwartchain/users/query";
import { QueryAllUniqueUsersResponse } from "./types/stwartchain/users/query";
import { QueryTotalResponse } from "./types/stwartchain/users/query";
import { MsgUpdateParamsResponse } from "./types/stwartchain/users/tx";


export { QueryAllStatsResponse, QueryGetUniqueUsersResponse, MsgUpdateParams, Stats, QueryStatsByDateResponse, QueryGetStatsResponse, Params, UniqueUserAddresses, QueryAllStatsRequest, QueryStatsByDateRequest, QueryAllUniqueUsersRequest, DailyStats, UniqueUsers, QueryTotalRequest, GenesisState, QueryParamsResponse, QueryGetStatsRequest, TotalUsers, QueryParamsRequest, QueryGetUniqueUsersRequest, QueryAllUniqueUsersResponse, QueryTotalResponse, MsgUpdateParamsResponse };

type sendQueryAllStatsResponseParams = {
  value: QueryAllStatsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetUniqueUsersResponseParams = {
  value: QueryGetUniqueUsersResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendStatsParams = {
  value: Stats,
  fee?: StdFee,
  memo?: string
};

type sendQueryStatsByDateResponseParams = {
  value: QueryStatsByDateResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetStatsResponseParams = {
  value: QueryGetStatsResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendUniqueUserAddressesParams = {
  value: UniqueUserAddresses,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllStatsRequestParams = {
  value: QueryAllStatsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryStatsByDateRequestParams = {
  value: QueryStatsByDateRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllUniqueUsersRequestParams = {
  value: QueryAllUniqueUsersRequest,
  fee?: StdFee,
  memo?: string
};

type sendDailyStatsParams = {
  value: DailyStats,
  fee?: StdFee,
  memo?: string
};

type sendUniqueUsersParams = {
  value: UniqueUsers,
  fee?: StdFee,
  memo?: string
};

type sendQueryTotalRequestParams = {
  value: QueryTotalRequest,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetStatsRequestParams = {
  value: QueryGetStatsRequest,
  fee?: StdFee,
  memo?: string
};

type sendTotalUsersParams = {
  value: TotalUsers,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetUniqueUsersRequestParams = {
  value: QueryGetUniqueUsersRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllUniqueUsersResponseParams = {
  value: QueryAllUniqueUsersResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryTotalResponseParams = {
  value: QueryTotalResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};


type queryAllStatsResponseParams = {
  value: QueryAllStatsResponse,
};

type queryGetUniqueUsersResponseParams = {
  value: QueryGetUniqueUsersResponse,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type statsParams = {
  value: Stats,
};

type queryStatsByDateResponseParams = {
  value: QueryStatsByDateResponse,
};

type queryGetStatsResponseParams = {
  value: QueryGetStatsResponse,
};

type paramsParams = {
  value: Params,
};

type uniqueUserAddressesParams = {
  value: UniqueUserAddresses,
};

type queryAllStatsRequestParams = {
  value: QueryAllStatsRequest,
};

type queryStatsByDateRequestParams = {
  value: QueryStatsByDateRequest,
};

type queryAllUniqueUsersRequestParams = {
  value: QueryAllUniqueUsersRequest,
};

type dailyStatsParams = {
  value: DailyStats,
};

type uniqueUsersParams = {
  value: UniqueUsers,
};

type queryTotalRequestParams = {
  value: QueryTotalRequest,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryGetStatsRequestParams = {
  value: QueryGetStatsRequest,
};

type totalUsersParams = {
  value: TotalUsers,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetUniqueUsersRequestParams = {
  value: QueryGetUniqueUsersRequest,
};

type queryAllUniqueUsersResponseParams = {
  value: QueryAllUniqueUsersResponse,
};

type queryTotalResponseParams = {
  value: QueryTotalResponse,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryAllStatsResponse({ value, fee, memo }: sendQueryAllStatsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllStatsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllStatsResponse({ value: QueryAllStatsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllStatsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetUniqueUsersResponse({ value, fee, memo }: sendQueryGetUniqueUsersResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetUniqueUsersResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetUniqueUsersResponse({ value: QueryGetUniqueUsersResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetUniqueUsersResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendStats({ value, fee, memo }: sendStatsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendStats: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.stats({ value: Stats.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendStats: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryStatsByDateResponse({ value, fee, memo }: sendQueryStatsByDateResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryStatsByDateResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryStatsByDateResponse({ value: QueryStatsByDateResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryStatsByDateResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetStatsResponse({ value, fee, memo }: sendQueryGetStatsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetStatsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetStatsResponse({ value: QueryGetStatsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetStatsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendUniqueUserAddresses({ value, fee, memo }: sendUniqueUserAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendUniqueUserAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.uniqueUserAddresses({ value: UniqueUserAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendUniqueUserAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllStatsRequest({ value, fee, memo }: sendQueryAllStatsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllStatsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllStatsRequest({ value: QueryAllStatsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllStatsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryStatsByDateRequest({ value, fee, memo }: sendQueryStatsByDateRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryStatsByDateRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryStatsByDateRequest({ value: QueryStatsByDateRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryStatsByDateRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllUniqueUsersRequest({ value, fee, memo }: sendQueryAllUniqueUsersRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllUniqueUsersRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllUniqueUsersRequest({ value: QueryAllUniqueUsersRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllUniqueUsersRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendDailyStats({ value, fee, memo }: sendDailyStatsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendDailyStats: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.dailyStats({ value: DailyStats.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendDailyStats: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendUniqueUsers({ value, fee, memo }: sendUniqueUsersParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendUniqueUsers: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.uniqueUsers({ value: UniqueUsers.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendUniqueUsers: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryTotalRequest({ value, fee, memo }: sendQueryTotalRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryTotalRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryTotalRequest({ value: QueryTotalRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryTotalRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetStatsRequest({ value, fee, memo }: sendQueryGetStatsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetStatsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetStatsRequest({ value: QueryGetStatsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetStatsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTotalUsers({ value, fee, memo }: sendTotalUsersParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTotalUsers: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.totalUsers({ value: TotalUsers.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTotalUsers: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetUniqueUsersRequest({ value, fee, memo }: sendQueryGetUniqueUsersRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetUniqueUsersRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetUniqueUsersRequest({ value: QueryGetUniqueUsersRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetUniqueUsersRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllUniqueUsersResponse({ value, fee, memo }: sendQueryAllUniqueUsersResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllUniqueUsersResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllUniqueUsersResponse({ value: QueryAllUniqueUsersResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllUniqueUsersResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryTotalResponse({ value, fee, memo }: sendQueryTotalResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryTotalResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryTotalResponse({ value: QueryTotalResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryTotalResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryAllStatsResponse({ value }: queryAllStatsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryAllStatsResponse", value: QueryAllStatsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllStatsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetUniqueUsersResponse({ value }: queryGetUniqueUsersResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryGetUniqueUsersResponse", value: QueryGetUniqueUsersResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetUniqueUsersResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		stats({ value }: statsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.Stats", value: Stats.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Stats: Could not create message: ' + e.message)
			}
		},
		
		queryStatsByDateResponse({ value }: queryStatsByDateResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryStatsByDateResponse", value: QueryStatsByDateResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryStatsByDateResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetStatsResponse({ value }: queryGetStatsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryGetStatsResponse", value: QueryGetStatsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetStatsResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		uniqueUserAddresses({ value }: uniqueUserAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.UniqueUserAddresses", value: UniqueUserAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:UniqueUserAddresses: Could not create message: ' + e.message)
			}
		},
		
		queryAllStatsRequest({ value }: queryAllStatsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryAllStatsRequest", value: QueryAllStatsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllStatsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryStatsByDateRequest({ value }: queryStatsByDateRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryStatsByDateRequest", value: QueryStatsByDateRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryStatsByDateRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllUniqueUsersRequest({ value }: queryAllUniqueUsersRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryAllUniqueUsersRequest", value: QueryAllUniqueUsersRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllUniqueUsersRequest: Could not create message: ' + e.message)
			}
		},
		
		dailyStats({ value }: dailyStatsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.DailyStats", value: DailyStats.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:DailyStats: Could not create message: ' + e.message)
			}
		},
		
		uniqueUsers({ value }: uniqueUsersParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.UniqueUsers", value: UniqueUsers.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:UniqueUsers: Could not create message: ' + e.message)
			}
		},
		
		queryTotalRequest({ value }: queryTotalRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryTotalRequest", value: QueryTotalRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryTotalRequest: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetStatsRequest({ value }: queryGetStatsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryGetStatsRequest", value: QueryGetStatsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetStatsRequest: Could not create message: ' + e.message)
			}
		},
		
		totalUsers({ value }: totalUsersParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.TotalUsers", value: TotalUsers.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:TotalUsers: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetUniqueUsersRequest({ value }: queryGetUniqueUsersRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryGetUniqueUsersRequest", value: QueryGetUniqueUsersRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetUniqueUsersRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllUniqueUsersResponse({ value }: queryAllUniqueUsersResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryAllUniqueUsersResponse", value: QueryAllUniqueUsersResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllUniqueUsersResponse: Could not create message: ' + e.message)
			}
		},
		
		queryTotalResponse({ value }: queryTotalResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.QueryTotalResponse", value: QueryTotalResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryTotalResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.users.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			StwartchainUsers: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;