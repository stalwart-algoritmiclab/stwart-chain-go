// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/feepolicy/tariff.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Tariff struct {
	Denom         string  `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Id            uint64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Amount        string  `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	MinRefBalance string  `protobuf:"bytes,4,opt,name=minRefBalance,proto3" json:"minRefBalance,omitempty"`
	Fees          []*Fees `protobuf:"bytes,5,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (m *Tariff) Reset()         { *m = Tariff{} }
func (m *Tariff) String() string { return proto.CompactTextString(m) }
func (*Tariff) ProtoMessage()    {}
func (*Tariff) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad912d25bfad2ad, []int{0}
}
func (m *Tariff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tariff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tariff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tariff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tariff.Merge(m, src)
}
func (m *Tariff) XXX_Size() int {
	return m.Size()
}
func (m *Tariff) XXX_DiscardUnknown() {
	xxx_messageInfo_Tariff.DiscardUnknown(m)
}

var xxx_messageInfo_Tariff proto.InternalMessageInfo

func (m *Tariff) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Tariff) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tariff) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Tariff) GetMinRefBalance() string {
	if m != nil {
		return m.MinRefBalance
	}
	return ""
}

func (m *Tariff) GetFees() []*Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func init() {
	proto.RegisterType((*Tariff)(nil), "stwartchain.feepolicy.Tariff")
}

func init() {
	proto.RegisterFile("stwartchain/feepolicy/tariff.proto", fileDescriptor_fad912d25bfad2ad)
}

var fileDescriptor_fad912d25bfad2ad = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0x9b, 0x4e, 0xa7, 0x60, 0x44, 0x17, 0x41, 0xa5, 0x28, 0x84, 0x32, 0xb8, 0xe8, 0xc6,
	0x04, 0xf4, 0x06, 0x03, 0x7a, 0x80, 0xe2, 0xca, 0x8d, 0xa4, 0xed, 0x1f, 0x27, 0xda, 0x26, 0xa5,
	0x89, 0xe8, 0xdc, 0xc2, 0x0b, 0x78, 0x1f, 0x97, 0xb3, 0x74, 0x29, 0xed, 0x45, 0xa4, 0xa9, 0xc8,
	0x0c, 0xcc, 0xf2, 0x25, 0xdf, 0x7b, 0x2f, 0x79, 0x78, 0x61, 0xdd, 0x9b, 0xe8, 0x5c, 0xb9, 0x12,
	0x4a, 0x73, 0x09, 0xd0, 0x9a, 0x5a, 0x95, 0x6b, 0xee, 0x44, 0xa7, 0xa4, 0x64, 0x6d, 0x67, 0x9c,
	0x21, 0xa7, 0x5b, 0x0c, 0xfb, 0x67, 0xce, 0xd3, 0xfd, 0x56, 0x09, 0x60, 0x27, 0xe3, 0xe2, 0x13,
	0xe1, 0xf8, 0xde, 0x27, 0x91, 0x13, 0x3c, 0xaf, 0x40, 0x9b, 0x26, 0x41, 0x29, 0xca, 0x0e, 0xf2,
	0x49, 0x90, 0x63, 0x1c, 0xaa, 0x2a, 0x09, 0x53, 0x94, 0x45, 0x79, 0xa8, 0x2a, 0x72, 0x86, 0x63,
	0xd1, 0x98, 0x57, 0xed, 0x92, 0x99, 0xc7, 0xfe, 0x14, 0xb9, 0xc4, 0x47, 0x8d, 0xd2, 0x39, 0xc8,
	0xa5, 0xa8, 0x85, 0x2e, 0x21, 0x89, 0xfc, 0xf5, 0xee, 0x21, 0xe1, 0x38, 0x1a, 0xcb, 0x93, 0x79,
	0x3a, 0xcb, 0x0e, 0xaf, 0x2f, 0xd8, 0xde, 0x67, 0xb3, 0x3b, 0x00, 0x9b, 0x7b, 0x70, 0xf9, 0xf8,
	0xd5, 0x53, 0xb4, 0xe9, 0x29, 0xfa, 0xe9, 0x29, 0xfa, 0x18, 0x68, 0xb0, 0x19, 0x68, 0xf0, 0x3d,
	0xd0, 0xe0, 0xe1, 0xf6, 0x49, 0xb9, 0x5a, 0x14, 0xcc, 0x3a, 0x51, 0x8f, 0x21, 0xcc, 0x41, 0xb9,
	0xe2, 0xea, 0x59, 0x19, 0xde, 0x8c, 0xdf, 0x2d, 0x44, 0xf9, 0x02, 0xba, 0xe2, 0x53, 0xc5, 0xd5,
	0xb4, 0xc1, 0xfb, 0xf6, 0x80, 0xeb, 0x16, 0x6c, 0x11, 0xfb, 0x1d, 0x6e, 0x7e, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x42, 0x7a, 0x0a, 0x1b, 0x66, 0x01, 0x00, 0x00,
}

func (m *Tariff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tariff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tariff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTariff(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MinRefBalance) > 0 {
		i -= len(m.MinRefBalance)
		copy(dAtA[i:], m.MinRefBalance)
		i = encodeVarintTariff(dAtA, i, uint64(len(m.MinRefBalance)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTariff(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTariff(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTariff(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTariff(dAtA []byte, offset int, v uint64) int {
	offset -= sovTariff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tariff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTariff(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTariff(uint64(m.Id))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTariff(uint64(l))
	}
	l = len(m.MinRefBalance)
	if l > 0 {
		n += 1 + l + sovTariff(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTariff(uint64(l))
		}
	}
	return n
}

func sovTariff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTariff(x uint64) (n int) {
	return sovTariff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tariff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTariff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tariff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tariff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRefBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinRefBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, &Fees{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTariff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTariff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTariff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTariff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTariff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTariff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTariff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTariff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTariff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTariff = fmt.Errorf("proto: unexpected end of group")
)
