// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stwartchain/polls/query.proto

package polls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName      = "/stwartchain.polls.Query/Params"
	Query_PollsParams_FullMethodName = "/stwartchain.polls.Query/PollsParams"
	Query_Votes_FullMethodName       = "/stwartchain.polls.Query/Votes"
	Query_VotesAll_FullMethodName    = "/stwartchain.polls.Query/VotesAll"
	Query_Options_FullMethodName     = "/stwartchain.polls.Query/Options"
	Query_OptionsAll_FullMethodName  = "/stwartchain.polls.Query/OptionsAll"
	Query_Polls_FullMethodName       = "/stwartchain.polls.Query/Polls"
	Query_PollsAll_FullMethodName    = "/stwartchain.polls.Query/PollsAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a PollsParams by index.
	PollsParams(ctx context.Context, in *QueryGetPollsParamsRequest, opts ...grpc.CallOption) (*QueryGetPollsParamsResponse, error)
	// Queries a list of Votes items.
	Votes(ctx context.Context, in *QueryGetVotesRequest, opts ...grpc.CallOption) (*QueryGetVotesResponse, error)
	VotesAll(ctx context.Context, in *QueryAllVotesRequest, opts ...grpc.CallOption) (*QueryAllVotesResponse, error)
	// Queries a list of Options items.
	Options(ctx context.Context, in *QueryGetOptionsRequest, opts ...grpc.CallOption) (*QueryGetOptionsResponse, error)
	OptionsAll(ctx context.Context, in *QueryAllOptionsRequest, opts ...grpc.CallOption) (*QueryAllOptionsResponse, error)
	// Queries a list of Polls items.
	Polls(ctx context.Context, in *QueryGetPollsRequest, opts ...grpc.CallOption) (*QueryGetPollsResponse, error)
	PollsAll(ctx context.Context, in *QueryAllPollsRequest, opts ...grpc.CallOption) (*QueryAllPollsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsParams(ctx context.Context, in *QueryGetPollsParamsRequest, opts ...grpc.CallOption) (*QueryGetPollsParamsResponse, error) {
	out := new(QueryGetPollsParamsResponse)
	err := c.cc.Invoke(ctx, Query_PollsParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Votes(ctx context.Context, in *QueryGetVotesRequest, opts ...grpc.CallOption) (*QueryGetVotesResponse, error) {
	out := new(QueryGetVotesResponse)
	err := c.cc.Invoke(ctx, Query_Votes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VotesAll(ctx context.Context, in *QueryAllVotesRequest, opts ...grpc.CallOption) (*QueryAllVotesResponse, error) {
	out := new(QueryAllVotesResponse)
	err := c.cc.Invoke(ctx, Query_VotesAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Options(ctx context.Context, in *QueryGetOptionsRequest, opts ...grpc.CallOption) (*QueryGetOptionsResponse, error) {
	out := new(QueryGetOptionsResponse)
	err := c.cc.Invoke(ctx, Query_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptionsAll(ctx context.Context, in *QueryAllOptionsRequest, opts ...grpc.CallOption) (*QueryAllOptionsResponse, error) {
	out := new(QueryAllOptionsResponse)
	err := c.cc.Invoke(ctx, Query_OptionsAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Polls(ctx context.Context, in *QueryGetPollsRequest, opts ...grpc.CallOption) (*QueryGetPollsResponse, error) {
	out := new(QueryGetPollsResponse)
	err := c.cc.Invoke(ctx, Query_Polls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsAll(ctx context.Context, in *QueryAllPollsRequest, opts ...grpc.CallOption) (*QueryAllPollsResponse, error) {
	out := new(QueryAllPollsResponse)
	err := c.cc.Invoke(ctx, Query_PollsAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a PollsParams by index.
	PollsParams(context.Context, *QueryGetPollsParamsRequest) (*QueryGetPollsParamsResponse, error)
	// Queries a list of Votes items.
	Votes(context.Context, *QueryGetVotesRequest) (*QueryGetVotesResponse, error)
	VotesAll(context.Context, *QueryAllVotesRequest) (*QueryAllVotesResponse, error)
	// Queries a list of Options items.
	Options(context.Context, *QueryGetOptionsRequest) (*QueryGetOptionsResponse, error)
	OptionsAll(context.Context, *QueryAllOptionsRequest) (*QueryAllOptionsResponse, error)
	// Queries a list of Polls items.
	Polls(context.Context, *QueryGetPollsRequest) (*QueryGetPollsResponse, error)
	PollsAll(context.Context, *QueryAllPollsRequest) (*QueryAllPollsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) PollsParams(context.Context, *QueryGetPollsParamsRequest) (*QueryGetPollsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsParams not implemented")
}
func (UnimplementedQueryServer) Votes(context.Context, *QueryGetVotesRequest) (*QueryGetVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Votes not implemented")
}
func (UnimplementedQueryServer) VotesAll(context.Context, *QueryAllVotesRequest) (*QueryAllVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotesAll not implemented")
}
func (UnimplementedQueryServer) Options(context.Context, *QueryGetOptionsRequest) (*QueryGetOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedQueryServer) OptionsAll(context.Context, *QueryAllOptionsRequest) (*QueryAllOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptionsAll not implemented")
}
func (UnimplementedQueryServer) Polls(context.Context, *QueryGetPollsRequest) (*QueryGetPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Polls not implemented")
}
func (UnimplementedQueryServer) PollsAll(context.Context, *QueryAllPollsRequest) (*QueryAllPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPollsParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PollsParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsParams(ctx, req.(*QueryGetPollsParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Votes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Votes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Votes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Votes(ctx, req.(*QueryGetVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VotesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VotesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VotesAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VotesAll(ctx, req.(*QueryAllVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Options(ctx, req.(*QueryGetOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptionsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptionsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptionsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptionsAll(ctx, req.(*QueryAllOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Polls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Polls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Polls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Polls(ctx, req.(*QueryGetPollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PollsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsAll(ctx, req.(*QueryAllPollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stwartchain.polls.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PollsParams",
			Handler:    _Query_PollsParams_Handler,
		},
		{
			MethodName: "Votes",
			Handler:    _Query_Votes_Handler,
		},
		{
			MethodName: "VotesAll",
			Handler:    _Query_VotesAll_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Query_Options_Handler,
		},
		{
			MethodName: "OptionsAll",
			Handler:    _Query_OptionsAll_Handler,
		},
		{
			MethodName: "Polls",
			Handler:    _Query_Polls_Handler,
		},
		{
			MethodName: "PollsAll",
			Handler:    _Query_PollsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stwartchain/polls/query.proto",
}
