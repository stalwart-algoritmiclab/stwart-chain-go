// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/stats/fee_daily_stats.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeeDailyStats struct {
	Id            uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AmountWithFee []types.Coin `protobuf:"bytes,2,rep,name=amountWithFee,proto3" json:"amountWithFee"`
	AmountNoFee   []types.Coin `protobuf:"bytes,3,rep,name=amountNoFee,proto3" json:"amountNoFee"`
	Fee           []types.Coin `protobuf:"bytes,4,rep,name=fee,proto3" json:"fee"`
	CountWithFee  int32        `protobuf:"varint,5,opt,name=countWithFee,proto3" json:"countWithFee,omitempty"`
	CountNoFee    int32        `protobuf:"varint,6,opt,name=countNoFee,proto3" json:"countNoFee,omitempty"`
}

func (m *FeeDailyStats) Reset()         { *m = FeeDailyStats{} }
func (m *FeeDailyStats) String() string { return proto.CompactTextString(m) }
func (*FeeDailyStats) ProtoMessage()    {}
func (*FeeDailyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_944d87d3160f11a7, []int{0}
}
func (m *FeeDailyStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeDailyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeDailyStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeDailyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeDailyStats.Merge(m, src)
}
func (m *FeeDailyStats) XXX_Size() int {
	return m.Size()
}
func (m *FeeDailyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeDailyStats.DiscardUnknown(m)
}

var xxx_messageInfo_FeeDailyStats proto.InternalMessageInfo

func (m *FeeDailyStats) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FeeDailyStats) GetAmountWithFee() []types.Coin {
	if m != nil {
		return m.AmountWithFee
	}
	return nil
}

func (m *FeeDailyStats) GetAmountNoFee() []types.Coin {
	if m != nil {
		return m.AmountNoFee
	}
	return nil
}

func (m *FeeDailyStats) GetFee() []types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *FeeDailyStats) GetCountWithFee() int32 {
	if m != nil {
		return m.CountWithFee
	}
	return 0
}

func (m *FeeDailyStats) GetCountNoFee() int32 {
	if m != nil {
		return m.CountNoFee
	}
	return 0
}

func init() {
	proto.RegisterType((*FeeDailyStats)(nil), "stwartchain.stats.FeeDailyStats")
}

func init() {
	proto.RegisterFile("stwartchain/stats/fee_daily_stats.proto", fileDescriptor_944d87d3160f11a7)
}

var fileDescriptor_944d87d3160f11a7 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4e, 0x32, 0x31,
	0x14, 0x86, 0xa7, 0xc3, 0xcf, 0xa2, 0x7c, 0x7c, 0x89, 0x8d, 0x0b, 0x64, 0x51, 0x09, 0x1b, 0xd9,
	0xd8, 0x06, 0xbd, 0x02, 0x50, 0x59, 0xba, 0xc0, 0x85, 0x89, 0x2e, 0x48, 0xa7, 0x73, 0x80, 0x2a,
	0x33, 0x25, 0xb4, 0xfe, 0x70, 0x17, 0x5e, 0x82, 0x97, 0xc3, 0x92, 0xa5, 0x2b, 0x63, 0x66, 0x6e,
	0xc4, 0x74, 0x4a, 0xe2, 0xb0, 0x63, 0x37, 0x73, 0xce, 0xfb, 0x3e, 0x3d, 0xc9, 0x83, 0xcf, 0x8c,
	0x7d, 0x13, 0x2b, 0x2b, 0xe7, 0x42, 0xa5, 0xdc, 0x58, 0x61, 0x0d, 0x9f, 0x02, 0x4c, 0x62, 0xa1,
	0x16, 0xeb, 0x49, 0xf1, 0xcf, 0x96, 0x2b, 0x6d, 0x35, 0x39, 0x2a, 0x05, 0x59, 0xb1, 0x68, 0x1f,
	0xcf, 0xf4, 0x4c, 0x17, 0x5b, 0xee, 0xbe, 0x7c, 0xb0, 0x4d, 0xa5, 0x36, 0x89, 0x36, 0x3c, 0x12,
	0x06, 0xf8, 0x6b, 0x3f, 0x02, 0x2b, 0xfa, 0x5c, 0x6a, 0x95, 0xfa, 0x7d, 0xf7, 0x33, 0xc4, 0xcd,
	0x11, 0xc0, 0xb5, 0x7b, 0xe1, 0xce, 0x71, 0xc8, 0x7f, 0x1c, 0xaa, 0xb8, 0x85, 0x3a, 0xa8, 0x57,
	0x1d, 0x87, 0x2a, 0x26, 0x37, 0xb8, 0x29, 0x12, 0xfd, 0x92, 0xda, 0x7b, 0x65, 0xe7, 0x23, 0x80,
	0x56, 0xd8, 0xa9, 0xf4, 0x1a, 0x17, 0x27, 0xcc, 0x93, 0x99, 0x23, 0xb3, 0x1d, 0x99, 0x5d, 0x69,
	0x95, 0x0e, 0xab, 0x9b, 0xef, 0xd3, 0x60, 0xbc, 0xdf, 0x22, 0x03, 0xdc, 0xf0, 0x83, 0x5b, 0xed,
	0x20, 0x95, 0xc3, 0x20, 0xe5, 0x0e, 0xe9, 0xe3, 0xca, 0x14, 0xa0, 0x55, 0x3d, 0xac, 0xea, 0xb2,
	0xa4, 0x8b, 0xff, 0xc9, 0xf2, 0xed, 0xb5, 0x0e, 0xea, 0xd5, 0xc6, 0x7b, 0x33, 0x42, 0x31, 0x96,
	0x7f, 0x87, 0xd5, 0x8b, 0x44, 0x69, 0x32, 0x7c, 0xdc, 0x64, 0x14, 0x6d, 0x33, 0x8a, 0x7e, 0x32,
	0x8a, 0x3e, 0x72, 0x1a, 0x6c, 0x73, 0x1a, 0x7c, 0xe5, 0x34, 0x78, 0x18, 0xcc, 0x94, 0x5d, 0x88,
	0xc8, 0x09, 0x58, 0x38, 0x1d, 0xcc, 0x82, 0x9c, 0x73, 0xf5, 0xa4, 0x34, 0x4f, 0x9c, 0xc1, 0x48,
	0xc8, 0x67, 0x48, 0x63, 0xee, 0x65, 0x9d, 0x7b, 0xad, 0xef, 0x3b, 0xb1, 0x76, 0xbd, 0x04, 0x13,
	0xd5, 0x0b, 0x0d, 0x97, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xd6, 0x9b, 0x70, 0xfa, 0x01,
	0x00, 0x00,
}

func (m *FeeDailyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeDailyStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeDailyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountNoFee != 0 {
		i = encodeVarintFeeDailyStats(dAtA, i, uint64(m.CountNoFee))
		i--
		dAtA[i] = 0x30
	}
	if m.CountWithFee != 0 {
		i = encodeVarintFeeDailyStats(dAtA, i, uint64(m.CountWithFee))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeeDailyStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AmountNoFee) > 0 {
		for iNdEx := len(m.AmountNoFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountNoFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeeDailyStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AmountWithFee) > 0 {
		for iNdEx := len(m.AmountWithFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountWithFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeeDailyStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintFeeDailyStats(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeeDailyStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeeDailyStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeDailyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFeeDailyStats(uint64(m.Id))
	}
	if len(m.AmountWithFee) > 0 {
		for _, e := range m.AmountWithFee {
			l = e.Size()
			n += 1 + l + sovFeeDailyStats(uint64(l))
		}
	}
	if len(m.AmountNoFee) > 0 {
		for _, e := range m.AmountNoFee {
			l = e.Size()
			n += 1 + l + sovFeeDailyStats(uint64(l))
		}
	}
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovFeeDailyStats(uint64(l))
		}
	}
	if m.CountWithFee != 0 {
		n += 1 + sovFeeDailyStats(uint64(m.CountWithFee))
	}
	if m.CountNoFee != 0 {
		n += 1 + sovFeeDailyStats(uint64(m.CountNoFee))
	}
	return n
}

func sovFeeDailyStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeeDailyStats(x uint64) (n int) {
	return sovFeeDailyStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeDailyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeDailyStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeDailyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeDailyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountWithFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountWithFee = append(m.AmountWithFee, types.Coin{})
			if err := m.AmountWithFee[len(m.AmountWithFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountNoFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountNoFee = append(m.AmountNoFee, types.Coin{})
			if err := m.AmountNoFee[len(m.AmountNoFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountWithFee", wireType)
			}
			m.CountWithFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountWithFee |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountNoFee", wireType)
			}
			m.CountNoFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountNoFee |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeDailyStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeDailyStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeeDailyStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeeDailyStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeDailyStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeeDailyStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeeDailyStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeeDailyStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeeDailyStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeeDailyStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeeDailyStats = fmt.Errorf("proto: unexpected end of group")
)
