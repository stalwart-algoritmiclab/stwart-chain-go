// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stwartchain/feepolicy/tx.proto

package feepolicy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName    = "/stwartchain.feepolicy.Msg/UpdateParams"
	Msg_CreateAddresses_FullMethodName = "/stwartchain.feepolicy.Msg/CreateAddresses"
	Msg_UpdateAddresses_FullMethodName = "/stwartchain.feepolicy.Msg/UpdateAddresses"
	Msg_DeleteAddresses_FullMethodName = "/stwartchain.feepolicy.Msg/DeleteAddresses"
	Msg_CreateTariffs_FullMethodName   = "/stwartchain.feepolicy.Msg/CreateTariffs"
	Msg_UpdateTariffs_FullMethodName   = "/stwartchain.feepolicy.Msg/UpdateTariffs"
	Msg_DeleteTariffs_FullMethodName   = "/stwartchain.feepolicy.Msg/DeleteTariffs"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateAddresses(ctx context.Context, in *MsgCreateAddresses, opts ...grpc.CallOption) (*MsgCreateAddressesResponse, error)
	UpdateAddresses(ctx context.Context, in *MsgUpdateAddresses, opts ...grpc.CallOption) (*MsgUpdateAddressesResponse, error)
	DeleteAddresses(ctx context.Context, in *MsgDeleteAddresses, opts ...grpc.CallOption) (*MsgDeleteAddressesResponse, error)
	CreateTariffs(ctx context.Context, in *MsgCreateTariffs, opts ...grpc.CallOption) (*MsgCreateTariffsResponse, error)
	UpdateTariffs(ctx context.Context, in *MsgUpdateTariffs, opts ...grpc.CallOption) (*MsgUpdateTariffsResponse, error)
	DeleteTariffs(ctx context.Context, in *MsgDeleteTariffs, opts ...grpc.CallOption) (*MsgDeleteTariffsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAddresses(ctx context.Context, in *MsgCreateAddresses, opts ...grpc.CallOption) (*MsgCreateAddressesResponse, error) {
	out := new(MsgCreateAddressesResponse)
	err := c.cc.Invoke(ctx, Msg_CreateAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAddresses(ctx context.Context, in *MsgUpdateAddresses, opts ...grpc.CallOption) (*MsgUpdateAddressesResponse, error) {
	out := new(MsgUpdateAddressesResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAddresses(ctx context.Context, in *MsgDeleteAddresses, opts ...grpc.CallOption) (*MsgDeleteAddressesResponse, error) {
	out := new(MsgDeleteAddressesResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTariffs(ctx context.Context, in *MsgCreateTariffs, opts ...grpc.CallOption) (*MsgCreateTariffsResponse, error) {
	out := new(MsgCreateTariffsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateTariffs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTariffs(ctx context.Context, in *MsgUpdateTariffs, opts ...grpc.CallOption) (*MsgUpdateTariffsResponse, error) {
	out := new(MsgUpdateTariffsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateTariffs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTariffs(ctx context.Context, in *MsgDeleteTariffs, opts ...grpc.CallOption) (*MsgDeleteTariffsResponse, error) {
	out := new(MsgDeleteTariffsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteTariffs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateAddresses(context.Context, *MsgCreateAddresses) (*MsgCreateAddressesResponse, error)
	UpdateAddresses(context.Context, *MsgUpdateAddresses) (*MsgUpdateAddressesResponse, error)
	DeleteAddresses(context.Context, *MsgDeleteAddresses) (*MsgDeleteAddressesResponse, error)
	CreateTariffs(context.Context, *MsgCreateTariffs) (*MsgCreateTariffsResponse, error)
	UpdateTariffs(context.Context, *MsgUpdateTariffs) (*MsgUpdateTariffsResponse, error)
	DeleteTariffs(context.Context, *MsgDeleteTariffs) (*MsgDeleteTariffsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateAddresses(context.Context, *MsgCreateAddresses) (*MsgCreateAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddresses not implemented")
}
func (UnimplementedMsgServer) UpdateAddresses(context.Context, *MsgUpdateAddresses) (*MsgUpdateAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddresses not implemented")
}
func (UnimplementedMsgServer) DeleteAddresses(context.Context, *MsgDeleteAddresses) (*MsgDeleteAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddresses not implemented")
}
func (UnimplementedMsgServer) CreateTariffs(context.Context, *MsgCreateTariffs) (*MsgCreateTariffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariffs not implemented")
}
func (UnimplementedMsgServer) UpdateTariffs(context.Context, *MsgUpdateTariffs) (*MsgUpdateTariffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTariffs not implemented")
}
func (UnimplementedMsgServer) DeleteTariffs(context.Context, *MsgDeleteTariffs) (*MsgDeleteTariffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTariffs not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAddresses(ctx, req.(*MsgCreateAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAddresses(ctx, req.(*MsgUpdateAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAddresses(ctx, req.(*MsgDeleteAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTariffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTariffs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTariffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateTariffs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTariffs(ctx, req.(*MsgCreateTariffs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTariffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTariffs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTariffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTariffs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTariffs(ctx, req.(*MsgUpdateTariffs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTariffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTariffs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTariffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteTariffs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTariffs(ctx, req.(*MsgDeleteTariffs))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stwartchain.feepolicy.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateAddresses",
			Handler:    _Msg_CreateAddresses_Handler,
		},
		{
			MethodName: "UpdateAddresses",
			Handler:    _Msg_UpdateAddresses_Handler,
		},
		{
			MethodName: "DeleteAddresses",
			Handler:    _Msg_DeleteAddresses_Handler,
		},
		{
			MethodName: "CreateTariffs",
			Handler:    _Msg_CreateTariffs_Handler,
		},
		{
			MethodName: "UpdateTariffs",
			Handler:    _Msg_UpdateTariffs_Handler,
		},
		{
			MethodName: "DeleteTariffs",
			Handler:    _Msg_DeleteTariffs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stwartchain/feepolicy/tx.proto",
}
