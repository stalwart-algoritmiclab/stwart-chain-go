// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package polls

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Polls_8_list)(nil)

type _Polls_8_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Polls_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Polls_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Polls_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Polls_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Polls_8_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Polls_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Polls_8_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Polls_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Polls_12_list)(nil)

type _Polls_12_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Polls_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Polls_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Polls_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Polls_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Polls_12_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Polls_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Polls_12_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Polls_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Polls_13_list)(nil)

type _Polls_13_list struct {
	list *[]*Options
}

func (x *_Polls_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Polls_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Polls_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Options)
	(*x.list)[i] = concreteValue
}

func (x *_Polls_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Options)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Polls_13_list) AppendMutable() protoreflect.Value {
	v := new(Options)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Polls_13_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Polls_13_list) NewElement() protoreflect.Value {
	v := new(Options)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Polls_13_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Polls                     protoreflect.MessageDescriptor
	fd_Polls_id                  protoreflect.FieldDescriptor
	fd_Polls_title               protoreflect.FieldDescriptor
	fd_Polls_description         protoreflect.FieldDescriptor
	fd_Polls_proposerAddress     protoreflect.FieldDescriptor
	fd_Polls_votingStartTime     protoreflect.FieldDescriptor
	fd_Polls_votingEndTime       protoreflect.FieldDescriptor
	fd_Polls_votingPeriod        protoreflect.FieldDescriptor
	fd_Polls_minVoteAmount       protoreflect.FieldDescriptor
	fd_Polls_status              protoreflect.FieldDescriptor
	fd_Polls_failureReason       protoreflect.FieldDescriptor
	fd_Polls_minAddressesCount   protoreflect.FieldDescriptor
	fd_Polls_minVotedCoinsAmount protoreflect.FieldDescriptor
	fd_Polls_options             protoreflect.FieldDescriptor
)

func init() {
	file_stwartchain_polls_polls_proto_init()
	md_Polls = File_stwartchain_polls_polls_proto.Messages().ByName("Polls")
	fd_Polls_id = md_Polls.Fields().ByName("id")
	fd_Polls_title = md_Polls.Fields().ByName("title")
	fd_Polls_description = md_Polls.Fields().ByName("description")
	fd_Polls_proposerAddress = md_Polls.Fields().ByName("proposerAddress")
	fd_Polls_votingStartTime = md_Polls.Fields().ByName("votingStartTime")
	fd_Polls_votingEndTime = md_Polls.Fields().ByName("votingEndTime")
	fd_Polls_votingPeriod = md_Polls.Fields().ByName("votingPeriod")
	fd_Polls_minVoteAmount = md_Polls.Fields().ByName("minVoteAmount")
	fd_Polls_status = md_Polls.Fields().ByName("status")
	fd_Polls_failureReason = md_Polls.Fields().ByName("failureReason")
	fd_Polls_minAddressesCount = md_Polls.Fields().ByName("minAddressesCount")
	fd_Polls_minVotedCoinsAmount = md_Polls.Fields().ByName("minVotedCoinsAmount")
	fd_Polls_options = md_Polls.Fields().ByName("options")
}

var _ protoreflect.Message = (*fastReflection_Polls)(nil)

type fastReflection_Polls Polls

func (x *Polls) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Polls)(x)
}

func (x *Polls) slowProtoReflect() protoreflect.Message {
	mi := &file_stwartchain_polls_polls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Polls_messageType fastReflection_Polls_messageType
var _ protoreflect.MessageType = fastReflection_Polls_messageType{}

type fastReflection_Polls_messageType struct{}

func (x fastReflection_Polls_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Polls)(nil)
}
func (x fastReflection_Polls_messageType) New() protoreflect.Message {
	return new(fastReflection_Polls)
}
func (x fastReflection_Polls_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Polls
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Polls) Descriptor() protoreflect.MessageDescriptor {
	return md_Polls
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Polls) Type() protoreflect.MessageType {
	return _fastReflection_Polls_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Polls) New() protoreflect.Message {
	return new(fastReflection_Polls)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Polls) Interface() protoreflect.ProtoMessage {
	return (*Polls)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Polls) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Polls_id, value) {
			return
		}
	}
	if x.Title != "" {
		value := protoreflect.ValueOfString(x.Title)
		if !f(fd_Polls_title, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_Polls_description, value) {
			return
		}
	}
	if x.ProposerAddress != "" {
		value := protoreflect.ValueOfString(x.ProposerAddress)
		if !f(fd_Polls_proposerAddress, value) {
			return
		}
	}
	if x.VotingStartTime != "" {
		value := protoreflect.ValueOfString(x.VotingStartTime)
		if !f(fd_Polls_votingStartTime, value) {
			return
		}
	}
	if x.VotingEndTime != "" {
		value := protoreflect.ValueOfString(x.VotingEndTime)
		if !f(fd_Polls_votingEndTime, value) {
			return
		}
	}
	if x.VotingPeriod != "" {
		value := protoreflect.ValueOfString(x.VotingPeriod)
		if !f(fd_Polls_votingPeriod, value) {
			return
		}
	}
	if len(x.MinVoteAmount) != 0 {
		value := protoreflect.ValueOfList(&_Polls_8_list{list: &x.MinVoteAmount})
		if !f(fd_Polls_minVoteAmount, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_Polls_status, value) {
			return
		}
	}
	if x.FailureReason != "" {
		value := protoreflect.ValueOfString(x.FailureReason)
		if !f(fd_Polls_failureReason, value) {
			return
		}
	}
	if x.MinAddressesCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinAddressesCount)
		if !f(fd_Polls_minAddressesCount, value) {
			return
		}
	}
	if len(x.MinVotedCoinsAmount) != 0 {
		value := protoreflect.ValueOfList(&_Polls_12_list{list: &x.MinVotedCoinsAmount})
		if !f(fd_Polls_minVotedCoinsAmount, value) {
			return
		}
	}
	if len(x.Options) != 0 {
		value := protoreflect.ValueOfList(&_Polls_13_list{list: &x.Options})
		if !f(fd_Polls_options, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Polls) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stwartchain.polls.Polls.id":
		return x.Id != uint64(0)
	case "stwartchain.polls.Polls.title":
		return x.Title != ""
	case "stwartchain.polls.Polls.description":
		return x.Description != ""
	case "stwartchain.polls.Polls.proposerAddress":
		return x.ProposerAddress != ""
	case "stwartchain.polls.Polls.votingStartTime":
		return x.VotingStartTime != ""
	case "stwartchain.polls.Polls.votingEndTime":
		return x.VotingEndTime != ""
	case "stwartchain.polls.Polls.votingPeriod":
		return x.VotingPeriod != ""
	case "stwartchain.polls.Polls.minVoteAmount":
		return len(x.MinVoteAmount) != 0
	case "stwartchain.polls.Polls.status":
		return x.Status != ""
	case "stwartchain.polls.Polls.failureReason":
		return x.FailureReason != ""
	case "stwartchain.polls.Polls.minAddressesCount":
		return x.MinAddressesCount != uint64(0)
	case "stwartchain.polls.Polls.minVotedCoinsAmount":
		return len(x.MinVotedCoinsAmount) != 0
	case "stwartchain.polls.Polls.options":
		return len(x.Options) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.polls.Polls"))
		}
		panic(fmt.Errorf("message stwartchain.polls.Polls does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Polls) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stwartchain.polls.Polls.id":
		x.Id = uint64(0)
	case "stwartchain.polls.Polls.title":
		x.Title = ""
	case "stwartchain.polls.Polls.description":
		x.Description = ""
	case "stwartchain.polls.Polls.proposerAddress":
		x.ProposerAddress = ""
	case "stwartchain.polls.Polls.votingStartTime":
		x.VotingStartTime = ""
	case "stwartchain.polls.Polls.votingEndTime":
		x.VotingEndTime = ""
	case "stwartchain.polls.Polls.votingPeriod":
		x.VotingPeriod = ""
	case "stwartchain.polls.Polls.minVoteAmount":
		x.MinVoteAmount = nil
	case "stwartchain.polls.Polls.status":
		x.Status = ""
	case "stwartchain.polls.Polls.failureReason":
		x.FailureReason = ""
	case "stwartchain.polls.Polls.minAddressesCount":
		x.MinAddressesCount = uint64(0)
	case "stwartchain.polls.Polls.minVotedCoinsAmount":
		x.MinVotedCoinsAmount = nil
	case "stwartchain.polls.Polls.options":
		x.Options = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.polls.Polls"))
		}
		panic(fmt.Errorf("message stwartchain.polls.Polls does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Polls) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stwartchain.polls.Polls.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.polls.Polls.title":
		value := x.Title
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.proposerAddress":
		value := x.ProposerAddress
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.votingStartTime":
		value := x.VotingStartTime
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.votingEndTime":
		value := x.VotingEndTime
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.votingPeriod":
		value := x.VotingPeriod
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.minVoteAmount":
		if len(x.MinVoteAmount) == 0 {
			return protoreflect.ValueOfList(&_Polls_8_list{})
		}
		listValue := &_Polls_8_list{list: &x.MinVoteAmount}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.polls.Polls.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.failureReason":
		value := x.FailureReason
		return protoreflect.ValueOfString(value)
	case "stwartchain.polls.Polls.minAddressesCount":
		value := x.MinAddressesCount
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.polls.Polls.minVotedCoinsAmount":
		if len(x.MinVotedCoinsAmount) == 0 {
			return protoreflect.ValueOfList(&_Polls_12_list{})
		}
		listValue := &_Polls_12_list{list: &x.MinVotedCoinsAmount}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.polls.Polls.options":
		if len(x.Options) == 0 {
			return protoreflect.ValueOfList(&_Polls_13_list{})
		}
		listValue := &_Polls_13_list{list: &x.Options}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.polls.Polls"))
		}
		panic(fmt.Errorf("message stwartchain.polls.Polls does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Polls) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stwartchain.polls.Polls.id":
		x.Id = value.Uint()
	case "stwartchain.polls.Polls.title":
		x.Title = value.Interface().(string)
	case "stwartchain.polls.Polls.description":
		x.Description = value.Interface().(string)
	case "stwartchain.polls.Polls.proposerAddress":
		x.ProposerAddress = value.Interface().(string)
	case "stwartchain.polls.Polls.votingStartTime":
		x.VotingStartTime = value.Interface().(string)
	case "stwartchain.polls.Polls.votingEndTime":
		x.VotingEndTime = value.Interface().(string)
	case "stwartchain.polls.Polls.votingPeriod":
		x.VotingPeriod = value.Interface().(string)
	case "stwartchain.polls.Polls.minVoteAmount":
		lv := value.List()
		clv := lv.(*_Polls_8_list)
		x.MinVoteAmount = *clv.list
	case "stwartchain.polls.Polls.status":
		x.Status = value.Interface().(string)
	case "stwartchain.polls.Polls.failureReason":
		x.FailureReason = value.Interface().(string)
	case "stwartchain.polls.Polls.minAddressesCount":
		x.MinAddressesCount = value.Uint()
	case "stwartchain.polls.Polls.minVotedCoinsAmount":
		lv := value.List()
		clv := lv.(*_Polls_12_list)
		x.MinVotedCoinsAmount = *clv.list
	case "stwartchain.polls.Polls.options":
		lv := value.List()
		clv := lv.(*_Polls_13_list)
		x.Options = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.polls.Polls"))
		}
		panic(fmt.Errorf("message stwartchain.polls.Polls does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Polls) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stwartchain.polls.Polls.minVoteAmount":
		if x.MinVoteAmount == nil {
			x.MinVoteAmount = []*v1beta1.Coin{}
		}
		value := &_Polls_8_list{list: &x.MinVoteAmount}
		return protoreflect.ValueOfList(value)
	case "stwartchain.polls.Polls.minVotedCoinsAmount":
		if x.MinVotedCoinsAmount == nil {
			x.MinVotedCoinsAmount = []*v1beta1.Coin{}
		}
		value := &_Polls_12_list{list: &x.MinVotedCoinsAmount}
		return protoreflect.ValueOfList(value)
	case "stwartchain.polls.Polls.options":
		if x.Options == nil {
			x.Options = []*Options{}
		}
		value := &_Polls_13_list{list: &x.Options}
		return protoreflect.ValueOfList(value)
	case "stwartchain.polls.Polls.id":
		panic(fmt.Errorf("field id of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.title":
		panic(fmt.Errorf("field title of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.description":
		panic(fmt.Errorf("field description of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.proposerAddress":
		panic(fmt.Errorf("field proposerAddress of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.votingStartTime":
		panic(fmt.Errorf("field votingStartTime of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.votingEndTime":
		panic(fmt.Errorf("field votingEndTime of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.votingPeriod":
		panic(fmt.Errorf("field votingPeriod of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.status":
		panic(fmt.Errorf("field status of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.failureReason":
		panic(fmt.Errorf("field failureReason of message stwartchain.polls.Polls is not mutable"))
	case "stwartchain.polls.Polls.minAddressesCount":
		panic(fmt.Errorf("field minAddressesCount of message stwartchain.polls.Polls is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.polls.Polls"))
		}
		panic(fmt.Errorf("message stwartchain.polls.Polls does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Polls) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stwartchain.polls.Polls.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.polls.Polls.title":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.description":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.proposerAddress":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.votingStartTime":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.votingEndTime":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.votingPeriod":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.minVoteAmount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Polls_8_list{list: &list})
	case "stwartchain.polls.Polls.status":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.failureReason":
		return protoreflect.ValueOfString("")
	case "stwartchain.polls.Polls.minAddressesCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.polls.Polls.minVotedCoinsAmount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Polls_12_list{list: &list})
	case "stwartchain.polls.Polls.options":
		list := []*Options{}
		return protoreflect.ValueOfList(&_Polls_13_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.polls.Polls"))
		}
		panic(fmt.Errorf("message stwartchain.polls.Polls does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Polls) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stwartchain.polls.Polls", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Polls) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Polls) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Polls) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Polls) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Polls)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Title)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProposerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VotingStartTime)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VotingEndTime)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VotingPeriod)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.MinVoteAmount) > 0 {
			for _, e := range x.MinVoteAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FailureReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinAddressesCount != 0 {
			n += 1 + runtime.Sov(uint64(x.MinAddressesCount))
		}
		if len(x.MinVotedCoinsAmount) > 0 {
			for _, e := range x.MinVotedCoinsAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Options) > 0 {
			for _, e := range x.Options {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Polls)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Options) > 0 {
			for iNdEx := len(x.Options) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Options[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x6a
			}
		}
		if len(x.MinVotedCoinsAmount) > 0 {
			for iNdEx := len(x.MinVotedCoinsAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MinVotedCoinsAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if x.MinAddressesCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinAddressesCount))
			i--
			dAtA[i] = 0x58
		}
		if len(x.FailureReason) > 0 {
			i -= len(x.FailureReason)
			copy(dAtA[i:], x.FailureReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FailureReason)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.MinVoteAmount) > 0 {
			for iNdEx := len(x.MinVoteAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MinVoteAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.VotingPeriod) > 0 {
			i -= len(x.VotingPeriod)
			copy(dAtA[i:], x.VotingPeriod)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VotingPeriod)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.VotingEndTime) > 0 {
			i -= len(x.VotingEndTime)
			copy(dAtA[i:], x.VotingEndTime)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VotingEndTime)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.VotingStartTime) > 0 {
			i -= len(x.VotingStartTime)
			copy(dAtA[i:], x.VotingStartTime)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VotingStartTime)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.ProposerAddress) > 0 {
			i -= len(x.ProposerAddress)
			copy(dAtA[i:], x.ProposerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposerAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Title) > 0 {
			i -= len(x.Title)
			copy(dAtA[i:], x.Title)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Title)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Polls)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Polls: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Polls: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Title = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProposerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VotingStartTime = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VotingEndTime = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VotingPeriod = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinVoteAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinVoteAmount = append(x.MinVoteAmount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinVoteAmount[len(x.MinVoteAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FailureReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinAddressesCount", wireType)
				}
				x.MinAddressesCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinAddressesCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinVotedCoinsAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinVotedCoinsAmount = append(x.MinVotedCoinsAmount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinVotedCoinsAmount[len(x.MinVotedCoinsAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Options = append(x.Options, &Options{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Options[len(x.Options)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: stwartchain/polls/polls.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Polls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title               string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description         string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProposerAddress     string          `protobuf:"bytes,4,opt,name=proposerAddress,proto3" json:"proposerAddress,omitempty"`
	VotingStartTime     string          `protobuf:"bytes,5,opt,name=votingStartTime,proto3" json:"votingStartTime,omitempty"`
	VotingEndTime       string          `protobuf:"bytes,6,opt,name=votingEndTime,proto3" json:"votingEndTime,omitempty"`
	VotingPeriod        string          `protobuf:"bytes,7,opt,name=votingPeriod,proto3" json:"votingPeriod,omitempty"`
	MinVoteAmount       []*v1beta1.Coin `protobuf:"bytes,8,rep,name=minVoteAmount,proto3" json:"minVoteAmount,omitempty"`
	Status              string          `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	FailureReason       string          `protobuf:"bytes,10,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	MinAddressesCount   uint64          `protobuf:"varint,11,opt,name=minAddressesCount,proto3" json:"minAddressesCount,omitempty"`
	MinVotedCoinsAmount []*v1beta1.Coin `protobuf:"bytes,12,rep,name=minVotedCoinsAmount,proto3" json:"minVotedCoinsAmount,omitempty"`
	Options             []*Options      `protobuf:"bytes,13,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Polls) Reset() {
	*x = Polls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stwartchain_polls_polls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polls) ProtoMessage() {}

// Deprecated: Use Polls.ProtoReflect.Descriptor instead.
func (*Polls) Descriptor() ([]byte, []int) {
	return file_stwartchain_polls_polls_proto_rawDescGZIP(), []int{0}
}

func (x *Polls) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Polls) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Polls) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Polls) GetProposerAddress() string {
	if x != nil {
		return x.ProposerAddress
	}
	return ""
}

func (x *Polls) GetVotingStartTime() string {
	if x != nil {
		return x.VotingStartTime
	}
	return ""
}

func (x *Polls) GetVotingEndTime() string {
	if x != nil {
		return x.VotingEndTime
	}
	return ""
}

func (x *Polls) GetVotingPeriod() string {
	if x != nil {
		return x.VotingPeriod
	}
	return ""
}

func (x *Polls) GetMinVoteAmount() []*v1beta1.Coin {
	if x != nil {
		return x.MinVoteAmount
	}
	return nil
}

func (x *Polls) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Polls) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Polls) GetMinAddressesCount() uint64 {
	if x != nil {
		return x.MinAddressesCount
	}
	return 0
}

func (x *Polls) GetMinVotedCoinsAmount() []*v1beta1.Coin {
	if x != nil {
		return x.MinVotedCoinsAmount
	}
	return nil
}

func (x *Polls) GetOptions() []*Options {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_stwartchain_polls_polls_proto protoreflect.FileDescriptor

var file_stwartchain_polls_polls_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6f,
	0x6c, 0x6c, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x6c,
	0x6c, 0x73, 0x1a, 0x1f, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x04, 0x0a, 0x05, 0x50, 0x6f,
	0x6c, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x56, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x13,
	0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xac, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x42,
	0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6f, 0x6c, 0x6c,
	0x73, 0xa2, 0x02, 0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x11, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0xca, 0x02, 0x11, 0x53, 0x74,
	0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0xe2,
	0x02, 0x1d, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x50, 0x6f,
	0x6c, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x12, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x50,
	0x6f, 0x6c, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stwartchain_polls_polls_proto_rawDescOnce sync.Once
	file_stwartchain_polls_polls_proto_rawDescData = file_stwartchain_polls_polls_proto_rawDesc
)

func file_stwartchain_polls_polls_proto_rawDescGZIP() []byte {
	file_stwartchain_polls_polls_proto_rawDescOnce.Do(func() {
		file_stwartchain_polls_polls_proto_rawDescData = protoimpl.X.CompressGZIP(file_stwartchain_polls_polls_proto_rawDescData)
	})
	return file_stwartchain_polls_polls_proto_rawDescData
}

var file_stwartchain_polls_polls_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_stwartchain_polls_polls_proto_goTypes = []interface{}{
	(*Polls)(nil),        // 0: stwartchain.polls.Polls
	(*v1beta1.Coin)(nil), // 1: cosmos.base.v1beta1.Coin
	(*Options)(nil),      // 2: stwartchain.polls.Options
}
var file_stwartchain_polls_polls_proto_depIdxs = []int32{
	1, // 0: stwartchain.polls.Polls.minVoteAmount:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: stwartchain.polls.Polls.minVotedCoinsAmount:type_name -> cosmos.base.v1beta1.Coin
	2, // 2: stwartchain.polls.Polls.options:type_name -> stwartchain.polls.Options
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_stwartchain_polls_polls_proto_init() }
func file_stwartchain_polls_polls_proto_init() {
	if File_stwartchain_polls_polls_proto != nil {
		return
	}
	file_stwartchain_polls_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stwartchain_polls_polls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stwartchain_polls_polls_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stwartchain_polls_polls_proto_goTypes,
		DependencyIndexes: file_stwartchain_polls_polls_proto_depIdxs,
		MessageInfos:      file_stwartchain_polls_polls_proto_msgTypes,
	}.Build()
	File_stwartchain_polls_polls_proto = out.File
	file_stwartchain_polls_polls_proto_rawDesc = nil
	file_stwartchain_polls_polls_proto_goTypes = nil
	file_stwartchain_polls_polls_proto_depIdxs = nil
}
