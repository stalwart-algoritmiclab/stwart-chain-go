// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryParamsRequest } from "./types/stwartchain/faucet/query";
import { QueryGetTokensRequest } from "./types/stwartchain/faucet/query";
import { QueryGetTokensResponse } from "./types/stwartchain/faucet/query";
import { GenesisState } from "./types/stwartchain/faucet/genesis";
import { MsgUpdateTokensResponse } from "./types/stwartchain/faucet/tx";
import { MsgDeleteTokensResponse } from "./types/stwartchain/faucet/tx";
import { QueryAllTokensRequest } from "./types/stwartchain/faucet/query";
import { QueryAllTokensResponse } from "./types/stwartchain/faucet/query";
import { MsgUpdateTokens } from "./types/stwartchain/faucet/tx";
import { MsgDeleteTokens } from "./types/stwartchain/faucet/tx";
import { MsgIssueResponse } from "./types/stwartchain/faucet/tx";
import { QueryParamsResponse } from "./types/stwartchain/faucet/query";
import { MsgUpdateParams } from "./types/stwartchain/faucet/tx";
import { MsgUpdateParamsResponse } from "./types/stwartchain/faucet/tx";
import { MsgCreateTokensResponse } from "./types/stwartchain/faucet/tx";
import { Tokens } from "./types/stwartchain/faucet/tokens";
import { Params } from "./types/stwartchain/faucet/params";
import { MsgIssue } from "./types/stwartchain/faucet/tx";
import { MsgCreateTokens } from "./types/stwartchain/faucet/tx";


export { QueryParamsRequest, QueryGetTokensRequest, QueryGetTokensResponse, GenesisState, MsgUpdateTokensResponse, MsgDeleteTokensResponse, QueryAllTokensRequest, QueryAllTokensResponse, MsgUpdateTokens, MsgDeleteTokens, MsgIssueResponse, QueryParamsResponse, MsgUpdateParams, MsgUpdateParamsResponse, MsgCreateTokensResponse, Tokens, Params, MsgIssue, MsgCreateTokens };

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTokensRequestParams = {
  value: QueryGetTokensRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTokensResponseParams = {
  value: QueryGetTokensResponse,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateTokensResponseParams = {
  value: MsgUpdateTokensResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteTokensResponseParams = {
  value: MsgDeleteTokensResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTokensRequestParams = {
  value: QueryAllTokensRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTokensResponseParams = {
  value: QueryAllTokensResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateTokensParams = {
  value: MsgUpdateTokens,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteTokensParams = {
  value: MsgDeleteTokens,
  fee?: StdFee,
  memo?: string
};

type sendMsgIssueResponseParams = {
  value: MsgIssueResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTokensResponseParams = {
  value: MsgCreateTokensResponse,
  fee?: StdFee,
  memo?: string
};

type sendTokensParams = {
  value: Tokens,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgIssueParams = {
  value: MsgIssue,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTokensParams = {
  value: MsgCreateTokens,
  fee?: StdFee,
  memo?: string
};


type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetTokensRequestParams = {
  value: QueryGetTokensRequest,
};

type queryGetTokensResponseParams = {
  value: QueryGetTokensResponse,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgUpdateTokensResponseParams = {
  value: MsgUpdateTokensResponse,
};

type msgDeleteTokensResponseParams = {
  value: MsgDeleteTokensResponse,
};

type queryAllTokensRequestParams = {
  value: QueryAllTokensRequest,
};

type queryAllTokensResponseParams = {
  value: QueryAllTokensResponse,
};

type msgUpdateTokensParams = {
  value: MsgUpdateTokens,
};

type msgDeleteTokensParams = {
  value: MsgDeleteTokens,
};

type msgIssueResponseParams = {
  value: MsgIssueResponse,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgCreateTokensResponseParams = {
  value: MsgCreateTokensResponse,
};

type tokensParams = {
  value: Tokens,
};

type paramsParams = {
  value: Params,
};

type msgIssueParams = {
  value: MsgIssue,
};

type msgCreateTokensParams = {
  value: MsgCreateTokens,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTokensRequest({ value, fee, memo }: sendQueryGetTokensRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTokensRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTokensRequest({ value: QueryGetTokensRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTokensRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTokensResponse({ value, fee, memo }: sendQueryGetTokensResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTokensResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTokensResponse({ value: QueryGetTokensResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTokensResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateTokensResponse({ value, fee, memo }: sendMsgUpdateTokensResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateTokensResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateTokensResponse({ value: MsgUpdateTokensResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateTokensResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteTokensResponse({ value, fee, memo }: sendMsgDeleteTokensResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteTokensResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteTokensResponse({ value: MsgDeleteTokensResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteTokensResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTokensRequest({ value, fee, memo }: sendQueryAllTokensRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTokensRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTokensRequest({ value: QueryAllTokensRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTokensRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTokensResponse({ value, fee, memo }: sendQueryAllTokensResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTokensResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTokensResponse({ value: QueryAllTokensResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTokensResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateTokens({ value, fee, memo }: sendMsgUpdateTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateTokens({ value: MsgUpdateTokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteTokens({ value, fee, memo }: sendMsgDeleteTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteTokens({ value: MsgDeleteTokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgIssueResponse({ value, fee, memo }: sendMsgIssueResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgIssueResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgIssueResponse({ value: MsgIssueResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgIssueResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTokensResponse({ value, fee, memo }: sendMsgCreateTokensResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTokensResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTokensResponse({ value: MsgCreateTokensResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTokensResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTokens({ value, fee, memo }: sendTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.tokens({ value: Tokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgIssue({ value, fee, memo }: sendMsgIssueParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgIssue: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgIssue({ value: MsgIssue.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgIssue: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTokens({ value, fee, memo }: sendMsgCreateTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTokens({ value: MsgCreateTokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetTokensRequest({ value }: queryGetTokensRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.QueryGetTokensRequest", value: QueryGetTokensRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTokensRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetTokensResponse({ value }: queryGetTokensResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.QueryGetTokensResponse", value: QueryGetTokensResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTokensResponse: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateTokensResponse({ value }: msgUpdateTokensResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgUpdateTokensResponse", value: MsgUpdateTokensResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateTokensResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteTokensResponse({ value }: msgDeleteTokensResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgDeleteTokensResponse", value: MsgDeleteTokensResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteTokensResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllTokensRequest({ value }: queryAllTokensRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.QueryAllTokensRequest", value: QueryAllTokensRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTokensRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllTokensResponse({ value }: queryAllTokensResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.QueryAllTokensResponse", value: QueryAllTokensResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTokensResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateTokens({ value }: msgUpdateTokensParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgUpdateTokens", value: MsgUpdateTokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateTokens: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteTokens({ value }: msgDeleteTokensParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgDeleteTokens", value: MsgDeleteTokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteTokens: Could not create message: ' + e.message)
			}
		},
		
		msgIssueResponse({ value }: msgIssueResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgIssueResponse", value: MsgIssueResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgIssueResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTokensResponse({ value }: msgCreateTokensResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgCreateTokensResponse", value: MsgCreateTokensResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTokensResponse: Could not create message: ' + e.message)
			}
		},
		
		tokens({ value }: tokensParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.Tokens", value: Tokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Tokens: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgIssue({ value }: msgIssueParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgIssue", value: MsgIssue.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgIssue: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTokens({ value }: msgCreateTokensParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.faucet.MsgCreateTokens", value: MsgCreateTokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTokens: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			StwartchainFaucet: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;