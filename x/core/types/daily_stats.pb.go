// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/core/daily_stats.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DailyStats struct {
	IssuedCoins   []types.Coin `protobuf:"bytes,1,rep,name=issuedCoins,proto3" json:"issuedCoins"`
	CountIssued   uint64       `protobuf:"varint,2,opt,name=countIssued,proto3" json:"countIssued,omitempty"`
	BurnedCoins   []types.Coin `protobuf:"bytes,3,rep,name=burnedCoins,proto3" json:"burnedCoins"`
	CountBurned   uint64       `protobuf:"varint,4,opt,name=countBurned,proto3" json:"countBurned,omitempty"`
	WithdrawCoins []types.Coin `protobuf:"bytes,5,rep,name=withdrawCoins,proto3" json:"withdrawCoins"`
	CountWithdraw uint64       `protobuf:"varint,6,opt,name=countWithdraw,proto3" json:"countWithdraw,omitempty"`
}

func (m *DailyStats) Reset()         { *m = DailyStats{} }
func (m *DailyStats) String() string { return proto.CompactTextString(m) }
func (*DailyStats) ProtoMessage()    {}
func (*DailyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e81221de56af18a0, []int{0}
}
func (m *DailyStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DailyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DailyStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DailyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyStats.Merge(m, src)
}
func (m *DailyStats) XXX_Size() int {
	return m.Size()
}
func (m *DailyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyStats.DiscardUnknown(m)
}

var xxx_messageInfo_DailyStats proto.InternalMessageInfo

func (m *DailyStats) GetIssuedCoins() []types.Coin {
	if m != nil {
		return m.IssuedCoins
	}
	return nil
}

func (m *DailyStats) GetCountIssued() uint64 {
	if m != nil {
		return m.CountIssued
	}
	return 0
}

func (m *DailyStats) GetBurnedCoins() []types.Coin {
	if m != nil {
		return m.BurnedCoins
	}
	return nil
}

func (m *DailyStats) GetCountBurned() uint64 {
	if m != nil {
		return m.CountBurned
	}
	return 0
}

func (m *DailyStats) GetWithdrawCoins() []types.Coin {
	if m != nil {
		return m.WithdrawCoins
	}
	return nil
}

func (m *DailyStats) GetCountWithdraw() uint64 {
	if m != nil {
		return m.CountWithdraw
	}
	return 0
}

func init() {
	proto.RegisterType((*DailyStats)(nil), "stwartchain.core.DailyStats")
}

func init() {
	proto.RegisterFile("stwartchain/core/daily_stats.proto", fileDescriptor_e81221de56af18a0)
}

var fileDescriptor_e81221de56af18a0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4e, 0x02, 0x31,
	0x1c, 0xc6, 0xef, 0x00, 0x19, 0x4a, 0x48, 0xcc, 0xc5, 0xe1, 0x64, 0xa8, 0x84, 0x38, 0xb0, 0xd8,
	0x06, 0x7d, 0x01, 0x45, 0x1d, 0x5c, 0x71, 0x30, 0x61, 0x31, 0x6d, 0xaf, 0x81, 0x2a, 0xb4, 0xe4,
	0xfa, 0x47, 0xe4, 0x2d, 0x7c, 0x27, 0x17, 0x46, 0x46, 0x27, 0x63, 0xee, 0x5e, 0xc4, 0xb4, 0x45,
	0x73, 0x6c, 0x6c, 0xcd, 0xd7, 0xef, 0xff, 0xfd, 0x86, 0x1f, 0xea, 0x59, 0x58, 0xb1, 0x1c, 0xc4,
	0x94, 0x29, 0x4d, 0x85, 0xc9, 0x25, 0xcd, 0x98, 0x9a, 0xad, 0x9f, 0x2d, 0x30, 0xb0, 0x64, 0x91,
	0x1b, 0x30, 0xc9, 0x71, 0xa5, 0x43, 0x5c, 0xa7, 0x73, 0x32, 0x31, 0x13, 0xe3, 0x3f, 0xa9, 0x7b,
	0x85, 0x5e, 0x07, 0x0b, 0x63, 0xe7, 0xc6, 0x52, 0xce, 0xac, 0xa4, 0x6f, 0x03, 0x2e, 0x81, 0x0d,
	0xa8, 0x30, 0x4a, 0x87, 0xff, 0xde, 0x67, 0x0d, 0xa1, 0x3b, 0xb7, 0xfe, 0xe8, 0xc6, 0x93, 0x1b,
	0xd4, 0x52, 0xd6, 0x2e, 0x65, 0x76, 0x6b, 0x94, 0xb6, 0x69, 0xdc, 0xad, 0xf7, 0x5b, 0x97, 0xa7,
	0x24, 0x8c, 0x10, 0x37, 0x42, 0x76, 0x23, 0xc4, 0x35, 0x86, 0x8d, 0xcd, 0xf7, 0x59, 0x34, 0xaa,
	0xde, 0x24, 0x5d, 0xd4, 0x12, 0x66, 0xa9, 0xe1, 0xc1, 0x67, 0x69, 0xad, 0x1b, 0xf7, 0x1b, 0xa3,
	0x6a, 0xe4, 0x20, 0x7c, 0x99, 0xeb, 0x3f, 0x48, 0xfd, 0x40, 0x48, 0xe5, 0xe6, 0x1f, 0x32, 0xf4,
	0x59, 0xda, 0xa8, 0x40, 0x42, 0x94, 0xdc, 0xa3, 0xf6, 0x4a, 0xc1, 0x34, 0xcb, 0xd9, 0x2a, 0x60,
	0x8e, 0x0e, 0xc3, 0xec, 0x5f, 0x25, 0xe7, 0xa8, 0xed, 0x57, 0x9f, 0x76, 0x69, 0xda, 0xf4, 0xa8,
	0xfd, 0x70, 0x38, 0xde, 0x14, 0x38, 0xde, 0x16, 0x38, 0xfe, 0x29, 0x70, 0xfc, 0x51, 0xe2, 0x68,
	0x5b, 0xe2, 0xe8, 0xab, 0xc4, 0xd1, 0xf8, 0x7a, 0xa2, 0x60, 0xc6, 0x38, 0xb1, 0xc0, 0x66, 0x4e,
	0x18, 0x01, 0x29, 0xa6, 0x54, 0xbd, 0x28, 0x43, 0xe7, 0x4e, 0x2f, 0x67, 0xe2, 0x55, 0xea, 0x8c,
	0x06, 0x9d, 0x17, 0xc1, 0xf9, 0x7b, 0xb0, 0x0e, 0xeb, 0x85, 0xb4, 0xbc, 0xe9, 0x45, 0x5d, 0xfd,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x23, 0xae, 0x12, 0x16, 0x02, 0x00, 0x00,
}

func (m *DailyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DailyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountWithdraw != 0 {
		i = encodeVarintDailyStats(dAtA, i, uint64(m.CountWithdraw))
		i--
		dAtA[i] = 0x30
	}
	if len(m.WithdrawCoins) > 0 {
		for iNdEx := len(m.WithdrawCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDailyStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CountBurned != 0 {
		i = encodeVarintDailyStats(dAtA, i, uint64(m.CountBurned))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BurnedCoins) > 0 {
		for iNdEx := len(m.BurnedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDailyStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CountIssued != 0 {
		i = encodeVarintDailyStats(dAtA, i, uint64(m.CountIssued))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IssuedCoins) > 0 {
		for iNdEx := len(m.IssuedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssuedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDailyStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDailyStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovDailyStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DailyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IssuedCoins) > 0 {
		for _, e := range m.IssuedCoins {
			l = e.Size()
			n += 1 + l + sovDailyStats(uint64(l))
		}
	}
	if m.CountIssued != 0 {
		n += 1 + sovDailyStats(uint64(m.CountIssued))
	}
	if len(m.BurnedCoins) > 0 {
		for _, e := range m.BurnedCoins {
			l = e.Size()
			n += 1 + l + sovDailyStats(uint64(l))
		}
	}
	if m.CountBurned != 0 {
		n += 1 + sovDailyStats(uint64(m.CountBurned))
	}
	if len(m.WithdrawCoins) > 0 {
		for _, e := range m.WithdrawCoins {
			l = e.Size()
			n += 1 + l + sovDailyStats(uint64(l))
		}
	}
	if m.CountWithdraw != 0 {
		n += 1 + sovDailyStats(uint64(m.CountWithdraw))
	}
	return n
}

func sovDailyStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDailyStats(x uint64) (n int) {
	return sovDailyStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DailyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDailyStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuedCoins = append(m.IssuedCoins, types.Coin{})
			if err := m.IssuedCoins[len(m.IssuedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountIssued", wireType)
			}
			m.CountIssued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountIssued |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDailyStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnedCoins = append(m.BurnedCoins, types.Coin{})
			if err := m.BurnedCoins[len(m.BurnedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountBurned", wireType)
			}
			m.CountBurned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountBurned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDailyStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawCoins = append(m.WithdrawCoins, types.Coin{})
			if err := m.WithdrawCoins[len(m.WithdrawCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountWithdraw", wireType)
			}
			m.CountWithdraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountWithdraw |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDailyStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDailyStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDailyStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDailyStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDailyStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDailyStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDailyStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDailyStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDailyStats = fmt.Errorf("proto: unexpected end of group")
)
