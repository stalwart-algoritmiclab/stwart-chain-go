// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryParamsResponse } from "./types/stwartchain/core/query";
import { MsgRefReward } from "./types/stwartchain/core/tx";
import { QueryAllStatsRequest } from "./types/stwartchain/core/query";
import { DailyStats } from "./types/stwartchain/core/daily_stats";
import { MsgFeesResponse } from "./types/stwartchain/core/tx";
import { QueryGetStatsRequest } from "./types/stwartchain/core/query";
import { MsgSend } from "./types/stwartchain/core/tx";
import { QueryParamsRequest } from "./types/stwartchain/core/query";
import { MsgUpdateParams } from "./types/stwartchain/core/tx";
import { GenesisState } from "./types/stwartchain/core/genesis";
import { MsgUpdateParamsResponse } from "./types/stwartchain/core/tx";
import { MsgIssueResponse } from "./types/stwartchain/core/tx";
import { QueryGetStatsResponse } from "./types/stwartchain/core/query";
import { QueryAllStatsResponse } from "./types/stwartchain/core/query";
import { MsgFees } from "./types/stwartchain/core/tx";
import { MsgIssue } from "./types/stwartchain/core/tx";
import { Stats } from "./types/stwartchain/core/stats";
import { MsgWithdraw } from "./types/stwartchain/core/tx";
import { MsgRefund } from "./types/stwartchain/core/tx";
import { MsgRefRewardResponse } from "./types/stwartchain/core/tx";
import { Params } from "./types/stwartchain/core/params";
import { QueryGetStatsByDateRequest } from "./types/stwartchain/core/query";
import { QueryModulesAddressesRequest } from "./types/stwartchain/core/query";
import { MsgWithdrawResponse } from "./types/stwartchain/core/tx";
import { MsgSendResponse } from "./types/stwartchain/core/tx";
import { MsgRefundResponse } from "./types/stwartchain/core/tx";
import { MsgBurn } from "./types/stwartchain/core/tx";
import { QueryModulesAddressesResponse } from "./types/stwartchain/core/query";


export { QueryParamsResponse, MsgRefReward, QueryAllStatsRequest, DailyStats, MsgFeesResponse, QueryGetStatsRequest, MsgSend, QueryParamsRequest, MsgUpdateParams, GenesisState, MsgUpdateParamsResponse, MsgIssueResponse, QueryGetStatsResponse, QueryAllStatsResponse, MsgFees, MsgIssue, Stats, MsgWithdraw, MsgRefund, MsgRefRewardResponse, Params, QueryGetStatsByDateRequest, QueryModulesAddressesRequest, MsgWithdrawResponse, MsgSendResponse, MsgRefundResponse, MsgBurn, QueryModulesAddressesResponse };

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgRefRewardParams = {
  value: MsgRefReward,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllStatsRequestParams = {
  value: QueryAllStatsRequest,
  fee?: StdFee,
  memo?: string
};

type sendDailyStatsParams = {
  value: DailyStats,
  fee?: StdFee,
  memo?: string
};

type sendMsgFeesResponseParams = {
  value: MsgFeesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetStatsRequestParams = {
  value: QueryGetStatsRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendParams = {
  value: MsgSend,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgIssueResponseParams = {
  value: MsgIssueResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetStatsResponseParams = {
  value: QueryGetStatsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllStatsResponseParams = {
  value: QueryAllStatsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgFeesParams = {
  value: MsgFees,
  fee?: StdFee,
  memo?: string
};

type sendMsgIssueParams = {
  value: MsgIssue,
  fee?: StdFee,
  memo?: string
};

type sendStatsParams = {
  value: Stats,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawParams = {
  value: MsgWithdraw,
  fee?: StdFee,
  memo?: string
};

type sendMsgRefundParams = {
  value: MsgRefund,
  fee?: StdFee,
  memo?: string
};

type sendMsgRefRewardResponseParams = {
  value: MsgRefRewardResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetStatsByDateRequestParams = {
  value: QueryGetStatsByDateRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryModulesAddressesRequestParams = {
  value: QueryModulesAddressesRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawResponseParams = {
  value: MsgWithdrawResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendResponseParams = {
  value: MsgSendResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgRefundResponseParams = {
  value: MsgRefundResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgBurnParams = {
  value: MsgBurn,
  fee?: StdFee,
  memo?: string
};

type sendQueryModulesAddressesResponseParams = {
  value: QueryModulesAddressesResponse,
  fee?: StdFee,
  memo?: string
};


type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type msgRefRewardParams = {
  value: MsgRefReward,
};

type queryAllStatsRequestParams = {
  value: QueryAllStatsRequest,
};

type dailyStatsParams = {
  value: DailyStats,
};

type msgFeesResponseParams = {
  value: MsgFeesResponse,
};

type queryGetStatsRequestParams = {
  value: QueryGetStatsRequest,
};

type msgSendParams = {
  value: MsgSend,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgIssueResponseParams = {
  value: MsgIssueResponse,
};

type queryGetStatsResponseParams = {
  value: QueryGetStatsResponse,
};

type queryAllStatsResponseParams = {
  value: QueryAllStatsResponse,
};

type msgFeesParams = {
  value: MsgFees,
};

type msgIssueParams = {
  value: MsgIssue,
};

type statsParams = {
  value: Stats,
};

type msgWithdrawParams = {
  value: MsgWithdraw,
};

type msgRefundParams = {
  value: MsgRefund,
};

type msgRefRewardResponseParams = {
  value: MsgRefRewardResponse,
};

type paramsParams = {
  value: Params,
};

type queryGetStatsByDateRequestParams = {
  value: QueryGetStatsByDateRequest,
};

type queryModulesAddressesRequestParams = {
  value: QueryModulesAddressesRequest,
};

type msgWithdrawResponseParams = {
  value: MsgWithdrawResponse,
};

type msgSendResponseParams = {
  value: MsgSendResponse,
};

type msgRefundResponseParams = {
  value: MsgRefundResponse,
};

type msgBurnParams = {
  value: MsgBurn,
};

type queryModulesAddressesResponseParams = {
  value: QueryModulesAddressesResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRefReward({ value, fee, memo }: sendMsgRefRewardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRefReward: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRefReward({ value: MsgRefReward.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRefReward: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllStatsRequest({ value, fee, memo }: sendQueryAllStatsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllStatsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllStatsRequest({ value: QueryAllStatsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllStatsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendDailyStats({ value, fee, memo }: sendDailyStatsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendDailyStats: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.dailyStats({ value: DailyStats.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendDailyStats: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgFeesResponse({ value, fee, memo }: sendMsgFeesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgFeesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgFeesResponse({ value: MsgFeesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgFeesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetStatsRequest({ value, fee, memo }: sendQueryGetStatsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetStatsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetStatsRequest({ value: QueryGetStatsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetStatsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSend({ value, fee, memo }: sendMsgSendParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSend: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSend({ value: MsgSend.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSend: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgIssueResponse({ value, fee, memo }: sendMsgIssueResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgIssueResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgIssueResponse({ value: MsgIssueResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgIssueResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetStatsResponse({ value, fee, memo }: sendQueryGetStatsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetStatsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetStatsResponse({ value: QueryGetStatsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetStatsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllStatsResponse({ value, fee, memo }: sendQueryAllStatsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllStatsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllStatsResponse({ value: QueryAllStatsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllStatsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgFees({ value, fee, memo }: sendMsgFeesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgFees: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgFees({ value: MsgFees.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgFees: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgIssue({ value, fee, memo }: sendMsgIssueParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgIssue: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgIssue({ value: MsgIssue.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgIssue: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendStats({ value, fee, memo }: sendStatsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendStats: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.stats({ value: Stats.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendStats: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdraw({ value, fee, memo }: sendMsgWithdrawParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdraw: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgWithdraw({ value: MsgWithdraw.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdraw: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRefund({ value, fee, memo }: sendMsgRefundParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRefund: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRefund({ value: MsgRefund.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRefund: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRefRewardResponse({ value, fee, memo }: sendMsgRefRewardResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRefRewardResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRefRewardResponse({ value: MsgRefRewardResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRefRewardResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetStatsByDateRequest({ value, fee, memo }: sendQueryGetStatsByDateRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetStatsByDateRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetStatsByDateRequest({ value: QueryGetStatsByDateRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetStatsByDateRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryModulesAddressesRequest({ value, fee, memo }: sendQueryModulesAddressesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryModulesAddressesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryModulesAddressesRequest({ value: QueryModulesAddressesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryModulesAddressesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdrawResponse({ value, fee, memo }: sendMsgWithdrawResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgWithdrawResponse({ value: MsgWithdrawResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendResponse({ value, fee, memo }: sendMsgSendResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSendResponse({ value: MsgSendResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRefundResponse({ value, fee, memo }: sendMsgRefundResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRefundResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRefundResponse({ value: MsgRefundResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRefundResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBurn({ value, fee, memo }: sendMsgBurnParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurn: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgBurn({ value: MsgBurn.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurn: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryModulesAddressesResponse({ value, fee, memo }: sendQueryModulesAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryModulesAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryModulesAddressesResponse({ value: QueryModulesAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryModulesAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgRefReward({ value }: msgRefRewardParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgRefReward", value: MsgRefReward.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRefReward: Could not create message: ' + e.message)
			}
		},
		
		queryAllStatsRequest({ value }: queryAllStatsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryAllStatsRequest", value: QueryAllStatsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllStatsRequest: Could not create message: ' + e.message)
			}
		},
		
		dailyStats({ value }: dailyStatsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.DailyStats", value: DailyStats.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:DailyStats: Could not create message: ' + e.message)
			}
		},
		
		msgFeesResponse({ value }: msgFeesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgFeesResponse", value: MsgFeesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgFeesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetStatsRequest({ value }: queryGetStatsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryGetStatsRequest", value: QueryGetStatsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetStatsRequest: Could not create message: ' + e.message)
			}
		},
		
		msgSend({ value }: msgSendParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgSend", value: MsgSend.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSend: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgIssueResponse({ value }: msgIssueResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgIssueResponse", value: MsgIssueResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgIssueResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetStatsResponse({ value }: queryGetStatsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryGetStatsResponse", value: QueryGetStatsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetStatsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllStatsResponse({ value }: queryAllStatsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryAllStatsResponse", value: QueryAllStatsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllStatsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgFees({ value }: msgFeesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgFees", value: MsgFees.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgFees: Could not create message: ' + e.message)
			}
		},
		
		msgIssue({ value }: msgIssueParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgIssue", value: MsgIssue.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgIssue: Could not create message: ' + e.message)
			}
		},
		
		stats({ value }: statsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.Stats", value: Stats.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Stats: Could not create message: ' + e.message)
			}
		},
		
		msgWithdraw({ value }: msgWithdrawParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgWithdraw", value: MsgWithdraw.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdraw: Could not create message: ' + e.message)
			}
		},
		
		msgRefund({ value }: msgRefundParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgRefund", value: MsgRefund.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRefund: Could not create message: ' + e.message)
			}
		},
		
		msgRefRewardResponse({ value }: msgRefRewardResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgRefRewardResponse", value: MsgRefRewardResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRefRewardResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryGetStatsByDateRequest({ value }: queryGetStatsByDateRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryGetStatsByDateRequest", value: QueryGetStatsByDateRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetStatsByDateRequest: Could not create message: ' + e.message)
			}
		},
		
		queryModulesAddressesRequest({ value }: queryModulesAddressesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryModulesAddressesRequest", value: QueryModulesAddressesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryModulesAddressesRequest: Could not create message: ' + e.message)
			}
		},
		
		msgWithdrawResponse({ value }: msgWithdrawResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgWithdrawResponse", value: MsgWithdrawResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSendResponse({ value }: msgSendResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgSendResponse", value: MsgSendResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendResponse: Could not create message: ' + e.message)
			}
		},
		
		msgRefundResponse({ value }: msgRefundResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgRefundResponse", value: MsgRefundResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRefundResponse: Could not create message: ' + e.message)
			}
		},
		
		msgBurn({ value }: msgBurnParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.MsgBurn", value: MsgBurn.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurn: Could not create message: ' + e.message)
			}
		},
		
		queryModulesAddressesResponse({ value }: queryModulesAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.core.QueryModulesAddressesResponse", value: QueryModulesAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryModulesAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			StwartchainCore: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;