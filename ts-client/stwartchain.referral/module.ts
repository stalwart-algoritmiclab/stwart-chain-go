// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { Params } from "./types/stwartchain/referral/params";
import { QueryParamsRequest } from "./types/stwartchain/referral/query";
import { QueryGetUserRequest } from "./types/stwartchain/referral/query";
import { MsgDeleteUser } from "./types/stwartchain/referral/tx";
import { MsgCreateUserResponse } from "./types/stwartchain/referral/tx";
import { GenesisState } from "./types/stwartchain/referral/genesis";
import { QueryAllUserRequest } from "./types/stwartchain/referral/query";
import { MsgUpdateParams } from "./types/stwartchain/referral/tx";
import { MsgDeleteUserResponse } from "./types/stwartchain/referral/tx";
import { User } from "./types/stwartchain/referral/user";
import { QueryParamsResponse } from "./types/stwartchain/referral/query";
import { QueryAllUserResponse } from "./types/stwartchain/referral/query";
import { MsgSetReferrer } from "./types/stwartchain/referral/tx";
import { MsgUpdateUser } from "./types/stwartchain/referral/tx";
import { MsgUpdateUserResponse } from "./types/stwartchain/referral/tx";
import { MsgSetReferrerResponse } from "./types/stwartchain/referral/tx";
import { MsgCreateUser } from "./types/stwartchain/referral/tx";
import { MsgUpdateParamsResponse } from "./types/stwartchain/referral/tx";
import { QueryGetUserResponse } from "./types/stwartchain/referral/query";


export { Params, QueryParamsRequest, QueryGetUserRequest, MsgDeleteUser, MsgCreateUserResponse, GenesisState, QueryAllUserRequest, MsgUpdateParams, MsgDeleteUserResponse, User, QueryParamsResponse, QueryAllUserResponse, MsgSetReferrer, MsgUpdateUser, MsgUpdateUserResponse, MsgSetReferrerResponse, MsgCreateUser, MsgUpdateParamsResponse, QueryGetUserResponse };

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetUserRequestParams = {
  value: QueryGetUserRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteUserParams = {
  value: MsgDeleteUser,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateUserResponseParams = {
  value: MsgCreateUserResponse,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllUserRequestParams = {
  value: QueryAllUserRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteUserResponseParams = {
  value: MsgDeleteUserResponse,
  fee?: StdFee,
  memo?: string
};

type sendUserParams = {
  value: User,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllUserResponseParams = {
  value: QueryAllUserResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetReferrerParams = {
  value: MsgSetReferrer,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateUserParams = {
  value: MsgUpdateUser,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateUserResponseParams = {
  value: MsgUpdateUserResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetReferrerResponseParams = {
  value: MsgSetReferrerResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateUserParams = {
  value: MsgCreateUser,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetUserResponseParams = {
  value: QueryGetUserResponse,
  fee?: StdFee,
  memo?: string
};


type paramsParams = {
  value: Params,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetUserRequestParams = {
  value: QueryGetUserRequest,
};

type msgDeleteUserParams = {
  value: MsgDeleteUser,
};

type msgCreateUserResponseParams = {
  value: MsgCreateUserResponse,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryAllUserRequestParams = {
  value: QueryAllUserRequest,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgDeleteUserResponseParams = {
  value: MsgDeleteUserResponse,
};

type userParams = {
  value: User,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryAllUserResponseParams = {
  value: QueryAllUserResponse,
};

type msgSetReferrerParams = {
  value: MsgSetReferrer,
};

type msgUpdateUserParams = {
  value: MsgUpdateUser,
};

type msgUpdateUserResponseParams = {
  value: MsgUpdateUserResponse,
};

type msgSetReferrerResponseParams = {
  value: MsgSetReferrerResponse,
};

type msgCreateUserParams = {
  value: MsgCreateUser,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type queryGetUserResponseParams = {
  value: QueryGetUserResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetUserRequest({ value, fee, memo }: sendQueryGetUserRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetUserRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetUserRequest({ value: QueryGetUserRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetUserRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteUser({ value, fee, memo }: sendMsgDeleteUserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteUser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteUser({ value: MsgDeleteUser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteUser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateUserResponse({ value, fee, memo }: sendMsgCreateUserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateUserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateUserResponse({ value: MsgCreateUserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateUserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllUserRequest({ value, fee, memo }: sendQueryAllUserRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllUserRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllUserRequest({ value: QueryAllUserRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllUserRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteUserResponse({ value, fee, memo }: sendMsgDeleteUserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteUserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteUserResponse({ value: MsgDeleteUserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteUserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendUser({ value, fee, memo }: sendUserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendUser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.user({ value: User.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendUser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllUserResponse({ value, fee, memo }: sendQueryAllUserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllUserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllUserResponse({ value: QueryAllUserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllUserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetReferrer({ value, fee, memo }: sendMsgSetReferrerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetReferrer: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSetReferrer({ value: MsgSetReferrer.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetReferrer: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateUser({ value, fee, memo }: sendMsgUpdateUserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateUser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateUser({ value: MsgUpdateUser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateUser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateUserResponse({ value, fee, memo }: sendMsgUpdateUserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateUserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateUserResponse({ value: MsgUpdateUserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateUserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetReferrerResponse({ value, fee, memo }: sendMsgSetReferrerResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetReferrerResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSetReferrerResponse({ value: MsgSetReferrerResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetReferrerResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateUser({ value, fee, memo }: sendMsgCreateUserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateUser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateUser({ value: MsgCreateUser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateUser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetUserResponse({ value, fee, memo }: sendQueryGetUserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetUserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetUserResponse({ value: QueryGetUserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetUserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetUserRequest({ value }: queryGetUserRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.QueryGetUserRequest", value: QueryGetUserRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetUserRequest: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteUser({ value }: msgDeleteUserParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgDeleteUser", value: MsgDeleteUser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteUser: Could not create message: ' + e.message)
			}
		},
		
		msgCreateUserResponse({ value }: msgCreateUserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgCreateUserResponse", value: MsgCreateUserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateUserResponse: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryAllUserRequest({ value }: queryAllUserRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.QueryAllUserRequest", value: QueryAllUserRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllUserRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteUserResponse({ value }: msgDeleteUserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgDeleteUserResponse", value: MsgDeleteUserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteUserResponse: Could not create message: ' + e.message)
			}
		},
		
		user({ value }: userParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.User", value: User.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:User: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllUserResponse({ value }: queryAllUserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.QueryAllUserResponse", value: QueryAllUserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllUserResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSetReferrer({ value }: msgSetReferrerParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgSetReferrer", value: MsgSetReferrer.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetReferrer: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateUser({ value }: msgUpdateUserParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgUpdateUser", value: MsgUpdateUser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateUser: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateUserResponse({ value }: msgUpdateUserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgUpdateUserResponse", value: MsgUpdateUserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateUserResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSetReferrerResponse({ value }: msgSetReferrerResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgSetReferrerResponse", value: MsgSetReferrerResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetReferrerResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateUser({ value }: msgCreateUserParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgCreateUser", value: MsgCreateUser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateUser: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetUserResponse({ value }: queryGetUserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.referral.QueryGetUserResponse", value: QueryGetUserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetUserResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			StwartchainReferral: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;