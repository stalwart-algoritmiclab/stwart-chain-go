// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stwartchain/polls/tx.proto

package polls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName      = "/stwartchain.polls.Msg/UpdateParams"
	Msg_CreatePollsParams_FullMethodName = "/stwartchain.polls.Msg/CreatePollsParams"
	Msg_UpdatePollsParams_FullMethodName = "/stwartchain.polls.Msg/UpdatePollsParams"
	Msg_DeletePollsParams_FullMethodName = "/stwartchain.polls.Msg/DeletePollsParams"
	Msg_CreatePoll_FullMethodName        = "/stwartchain.polls.Msg/CreatePoll"
	Msg_Vote_FullMethodName              = "/stwartchain.polls.Msg/Vote"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreatePollsParams(ctx context.Context, in *MsgCreatePollsParams, opts ...grpc.CallOption) (*MsgCreatePollsParamsResponse, error)
	UpdatePollsParams(ctx context.Context, in *MsgUpdatePollsParams, opts ...grpc.CallOption) (*MsgUpdatePollsParamsResponse, error)
	DeletePollsParams(ctx context.Context, in *MsgDeletePollsParams, opts ...grpc.CallOption) (*MsgDeletePollsParamsResponse, error)
	CreatePoll(ctx context.Context, in *MsgCreatePoll, opts ...grpc.CallOption) (*MsgCreatePollResponse, error)
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePollsParams(ctx context.Context, in *MsgCreatePollsParams, opts ...grpc.CallOption) (*MsgCreatePollsParamsResponse, error) {
	out := new(MsgCreatePollsParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CreatePollsParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePollsParams(ctx context.Context, in *MsgUpdatePollsParams, opts ...grpc.CallOption) (*MsgUpdatePollsParamsResponse, error) {
	out := new(MsgUpdatePollsParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdatePollsParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePollsParams(ctx context.Context, in *MsgDeletePollsParams, opts ...grpc.CallOption) (*MsgDeletePollsParamsResponse, error) {
	out := new(MsgDeletePollsParamsResponse)
	err := c.cc.Invoke(ctx, Msg_DeletePollsParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePoll(ctx context.Context, in *MsgCreatePoll, opts ...grpc.CallOption) (*MsgCreatePollResponse, error) {
	out := new(MsgCreatePollResponse)
	err := c.cc.Invoke(ctx, Msg_CreatePoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, Msg_Vote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreatePollsParams(context.Context, *MsgCreatePollsParams) (*MsgCreatePollsParamsResponse, error)
	UpdatePollsParams(context.Context, *MsgUpdatePollsParams) (*MsgUpdatePollsParamsResponse, error)
	DeletePollsParams(context.Context, *MsgDeletePollsParams) (*MsgDeletePollsParamsResponse, error)
	CreatePoll(context.Context, *MsgCreatePoll) (*MsgCreatePollResponse, error)
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreatePollsParams(context.Context, *MsgCreatePollsParams) (*MsgCreatePollsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePollsParams not implemented")
}
func (UnimplementedMsgServer) UpdatePollsParams(context.Context, *MsgUpdatePollsParams) (*MsgUpdatePollsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePollsParams not implemented")
}
func (UnimplementedMsgServer) DeletePollsParams(context.Context, *MsgDeletePollsParams) (*MsgDeletePollsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePollsParams not implemented")
}
func (UnimplementedMsgServer) CreatePoll(context.Context, *MsgCreatePoll) (*MsgCreatePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedMsgServer) Vote(context.Context, *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePollsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePollsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePollsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreatePollsParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePollsParams(ctx, req.(*MsgCreatePollsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePollsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePollsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePollsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdatePollsParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePollsParams(ctx, req.(*MsgUpdatePollsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePollsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeletePollsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePollsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeletePollsParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePollsParams(ctx, req.(*MsgDeletePollsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreatePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePoll(ctx, req.(*MsgCreatePoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stwartchain.polls.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreatePollsParams",
			Handler:    _Msg_CreatePollsParams_Handler,
		},
		{
			MethodName: "UpdatePollsParams",
			Handler:    _Msg_UpdatePollsParams_Handler,
		},
		{
			MethodName: "DeletePollsParams",
			Handler:    _Msg_DeletePollsParams_Handler,
		},
		{
			MethodName: "CreatePoll",
			Handler:    _Msg_CreatePoll_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stwartchain/polls/tx.proto",
}
