// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryAllRatesRequest } from "./types/stwartchain/rates/query";
import { MsgDeleteAddressesResponse } from "./types/stwartchain/rates/tx";
import { MsgCreateAddresses } from "./types/stwartchain/rates/tx";
import { QueryAllAddressesResponse } from "./types/stwartchain/rates/query";
import { QueryGetRatesRequest } from "./types/stwartchain/rates/query";
import { MsgUpdateAddressesResponse } from "./types/stwartchain/rates/tx";
import { GenesisState } from "./types/stwartchain/rates/genesis";
import { QueryGetAddressesResponse } from "./types/stwartchain/rates/query";
import { QueryAllRatesResponse } from "./types/stwartchain/rates/query";
import { Rates } from "./types/stwartchain/rates/rates";
import { MsgCreateAddressesResponse } from "./types/stwartchain/rates/tx";
import { MsgDeleteRatesResponse } from "./types/stwartchain/rates/tx";
import { MsgUpdateParams } from "./types/stwartchain/rates/tx";
import { QueryGetRatesResponse } from "./types/stwartchain/rates/query";
import { Params } from "./types/stwartchain/rates/params";
import { QueryGetAddressesRequest } from "./types/stwartchain/rates/query";
import { QueryAllAddressesRequest } from "./types/stwartchain/rates/query";
import { MsgCreateRatesResponse } from "./types/stwartchain/rates/tx";
import { MsgDeleteAddresses } from "./types/stwartchain/rates/tx";
import { MsgUpdateRates } from "./types/stwartchain/rates/tx";
import { MsgDeleteRates } from "./types/stwartchain/rates/tx";
import { QueryParamsResponse } from "./types/stwartchain/rates/query";
import { MsgUpdateRatesResponse } from "./types/stwartchain/rates/tx";
import { QueryParamsRequest } from "./types/stwartchain/rates/query";
import { MsgUpdateParamsResponse } from "./types/stwartchain/rates/tx";
import { Addresses } from "./types/stwartchain/rates/addresses";
import { MsgCreateRates } from "./types/stwartchain/rates/tx";
import { MsgUpdateAddresses } from "./types/stwartchain/rates/tx";


export { QueryAllRatesRequest, MsgDeleteAddressesResponse, MsgCreateAddresses, QueryAllAddressesResponse, QueryGetRatesRequest, MsgUpdateAddressesResponse, GenesisState, QueryGetAddressesResponse, QueryAllRatesResponse, Rates, MsgCreateAddressesResponse, MsgDeleteRatesResponse, MsgUpdateParams, QueryGetRatesResponse, Params, QueryGetAddressesRequest, QueryAllAddressesRequest, MsgCreateRatesResponse, MsgDeleteAddresses, MsgUpdateRates, MsgDeleteRates, QueryParamsResponse, MsgUpdateRatesResponse, QueryParamsRequest, MsgUpdateParamsResponse, Addresses, MsgCreateRates, MsgUpdateAddresses };

type sendQueryAllRatesRequestParams = {
  value: QueryAllRatesRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAddressesResponseParams = {
  value: MsgDeleteAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAddressesParams = {
  value: MsgCreateAddresses,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllAddressesResponseParams = {
  value: QueryAllAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetRatesRequestParams = {
  value: QueryGetRatesRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateAddressesResponseParams = {
  value: MsgUpdateAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressesResponseParams = {
  value: QueryGetAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllRatesResponseParams = {
  value: QueryAllRatesResponse,
  fee?: StdFee,
  memo?: string
};

type sendRatesParams = {
  value: Rates,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAddressesResponseParams = {
  value: MsgCreateAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteRatesResponseParams = {
  value: MsgDeleteRatesResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetRatesResponseParams = {
  value: QueryGetRatesResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressesRequestParams = {
  value: QueryGetAddressesRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllAddressesRequestParams = {
  value: QueryAllAddressesRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateRatesResponseParams = {
  value: MsgCreateRatesResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAddressesParams = {
  value: MsgDeleteAddresses,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateRatesParams = {
  value: MsgUpdateRates,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteRatesParams = {
  value: MsgDeleteRates,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateRatesResponseParams = {
  value: MsgUpdateRatesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendAddressesParams = {
  value: Addresses,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateRatesParams = {
  value: MsgCreateRates,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateAddressesParams = {
  value: MsgUpdateAddresses,
  fee?: StdFee,
  memo?: string
};


type queryAllRatesRequestParams = {
  value: QueryAllRatesRequest,
};

type msgDeleteAddressesResponseParams = {
  value: MsgDeleteAddressesResponse,
};

type msgCreateAddressesParams = {
  value: MsgCreateAddresses,
};

type queryAllAddressesResponseParams = {
  value: QueryAllAddressesResponse,
};

type queryGetRatesRequestParams = {
  value: QueryGetRatesRequest,
};

type msgUpdateAddressesResponseParams = {
  value: MsgUpdateAddressesResponse,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryGetAddressesResponseParams = {
  value: QueryGetAddressesResponse,
};

type queryAllRatesResponseParams = {
  value: QueryAllRatesResponse,
};

type ratesParams = {
  value: Rates,
};

type msgCreateAddressesResponseParams = {
  value: MsgCreateAddressesResponse,
};

type msgDeleteRatesResponseParams = {
  value: MsgDeleteRatesResponse,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type queryGetRatesResponseParams = {
  value: QueryGetRatesResponse,
};

type paramsParams = {
  value: Params,
};

type queryGetAddressesRequestParams = {
  value: QueryGetAddressesRequest,
};

type queryAllAddressesRequestParams = {
  value: QueryAllAddressesRequest,
};

type msgCreateRatesResponseParams = {
  value: MsgCreateRatesResponse,
};

type msgDeleteAddressesParams = {
  value: MsgDeleteAddresses,
};

type msgUpdateRatesParams = {
  value: MsgUpdateRates,
};

type msgDeleteRatesParams = {
  value: MsgDeleteRates,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type msgUpdateRatesResponseParams = {
  value: MsgUpdateRatesResponse,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type addressesParams = {
  value: Addresses,
};

type msgCreateRatesParams = {
  value: MsgCreateRates,
};

type msgUpdateAddressesParams = {
  value: MsgUpdateAddresses,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryAllRatesRequest({ value, fee, memo }: sendQueryAllRatesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllRatesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllRatesRequest({ value: QueryAllRatesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllRatesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteAddressesResponse({ value, fee, memo }: sendMsgDeleteAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteAddressesResponse({ value: MsgDeleteAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAddresses({ value, fee, memo }: sendMsgCreateAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateAddresses({ value: MsgCreateAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllAddressesResponse({ value, fee, memo }: sendQueryAllAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllAddressesResponse({ value: QueryAllAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetRatesRequest({ value, fee, memo }: sendQueryGetRatesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetRatesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetRatesRequest({ value: QueryGetRatesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetRatesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateAddressesResponse({ value, fee, memo }: sendMsgUpdateAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateAddressesResponse({ value: MsgUpdateAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressesResponse({ value, fee, memo }: sendQueryGetAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressesResponse({ value: QueryGetAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllRatesResponse({ value, fee, memo }: sendQueryAllRatesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllRatesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllRatesResponse({ value: QueryAllRatesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllRatesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendRates({ value, fee, memo }: sendRatesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendRates: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.rates({ value: Rates.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendRates: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAddressesResponse({ value, fee, memo }: sendMsgCreateAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateAddressesResponse({ value: MsgCreateAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteRatesResponse({ value, fee, memo }: sendMsgDeleteRatesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteRatesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteRatesResponse({ value: MsgDeleteRatesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteRatesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetRatesResponse({ value, fee, memo }: sendQueryGetRatesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetRatesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetRatesResponse({ value: QueryGetRatesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetRatesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressesRequest({ value, fee, memo }: sendQueryGetAddressesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressesRequest({ value: QueryGetAddressesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllAddressesRequest({ value, fee, memo }: sendQueryAllAddressesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllAddressesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllAddressesRequest({ value: QueryAllAddressesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllAddressesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateRatesResponse({ value, fee, memo }: sendMsgCreateRatesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateRatesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateRatesResponse({ value: MsgCreateRatesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateRatesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteAddresses({ value, fee, memo }: sendMsgDeleteAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteAddresses({ value: MsgDeleteAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateRates({ value, fee, memo }: sendMsgUpdateRatesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRates: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateRates({ value: MsgUpdateRates.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRates: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteRates({ value, fee, memo }: sendMsgDeleteRatesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteRates: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteRates({ value: MsgDeleteRates.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteRates: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateRatesResponse({ value, fee, memo }: sendMsgUpdateRatesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRatesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateRatesResponse({ value: MsgUpdateRatesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRatesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendAddresses({ value, fee, memo }: sendAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.addresses({ value: Addresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateRates({ value, fee, memo }: sendMsgCreateRatesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateRates: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateRates({ value: MsgCreateRates.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateRates: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateAddresses({ value, fee, memo }: sendMsgUpdateAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateAddresses({ value: MsgUpdateAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryAllRatesRequest({ value }: queryAllRatesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryAllRatesRequest", value: QueryAllRatesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllRatesRequest: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteAddressesResponse({ value }: msgDeleteAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgDeleteAddressesResponse", value: MsgDeleteAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAddresses({ value }: msgCreateAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgCreateAddresses", value: MsgCreateAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAddresses: Could not create message: ' + e.message)
			}
		},
		
		queryAllAddressesResponse({ value }: queryAllAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryAllAddressesResponse", value: QueryAllAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetRatesRequest({ value }: queryGetRatesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryGetRatesRequest", value: QueryGetRatesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetRatesRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateAddressesResponse({ value }: msgUpdateAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgUpdateAddressesResponse", value: MsgUpdateAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressesResponse({ value }: queryGetAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryGetAddressesResponse", value: QueryGetAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllRatesResponse({ value }: queryAllRatesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryAllRatesResponse", value: QueryAllRatesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllRatesResponse: Could not create message: ' + e.message)
			}
		},
		
		rates({ value }: ratesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.Rates", value: Rates.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Rates: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAddressesResponse({ value }: msgCreateAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgCreateAddressesResponse", value: MsgCreateAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteRatesResponse({ value }: msgDeleteRatesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgDeleteRatesResponse", value: MsgDeleteRatesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteRatesResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		queryGetRatesResponse({ value }: queryGetRatesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryGetRatesResponse", value: QueryGetRatesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetRatesResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressesRequest({ value }: queryGetAddressesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryGetAddressesRequest", value: QueryGetAddressesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressesRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllAddressesRequest({ value }: queryAllAddressesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryAllAddressesRequest", value: QueryAllAddressesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllAddressesRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreateRatesResponse({ value }: msgCreateRatesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgCreateRatesResponse", value: MsgCreateRatesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateRatesResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteAddresses({ value }: msgDeleteAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgDeleteAddresses", value: MsgDeleteAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteAddresses: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateRates({ value }: msgUpdateRatesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgUpdateRates", value: MsgUpdateRates.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRates: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteRates({ value }: msgDeleteRatesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgDeleteRates", value: MsgDeleteRates.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteRates: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateRatesResponse({ value }: msgUpdateRatesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgUpdateRatesResponse", value: MsgUpdateRatesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRatesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		addresses({ value }: addressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.Addresses", value: Addresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Addresses: Could not create message: ' + e.message)
			}
		},
		
		msgCreateRates({ value }: msgCreateRatesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgCreateRates", value: MsgCreateRates.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateRates: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateAddresses({ value }: msgUpdateAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.rates.MsgUpdateAddresses", value: MsgUpdateAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateAddresses: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			StwartchainRates: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;