// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stats

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var _ protoreflect.List = (*_AssetDailyStats_1_list)(nil)

type _AssetDailyStats_1_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_1_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_1_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_2_list)(nil)

type _AssetDailyStats_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_3_list)(nil)

type _AssetDailyStats_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_6_list)(nil)

type _AssetDailyStats_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_8_list)(nil)

type _AssetDailyStats_8_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_8_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_8_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_10_list)(nil)

type _AssetDailyStats_10_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_10_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_10_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_12_list)(nil)

type _AssetDailyStats_12_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_12_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_12_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AssetDailyStats_16_list)(nil)

type _AssetDailyStats_16_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AssetDailyStats_16_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AssetDailyStats_16_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AssetDailyStats_16_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AssetDailyStats_16_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AssetDailyStats_16_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_16_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AssetDailyStats_16_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AssetDailyStats_16_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AssetDailyStats                   protoreflect.MessageDescriptor
	fd_AssetDailyStats_amountWithFee     protoreflect.FieldDescriptor
	fd_AssetDailyStats_amountNoFee       protoreflect.FieldDescriptor
	fd_AssetDailyStats_fee               protoreflect.FieldDescriptor
	fd_AssetDailyStats_countWithFee      protoreflect.FieldDescriptor
	fd_AssetDailyStats_countNoFee        protoreflect.FieldDescriptor
	fd_AssetDailyStats_burned            protoreflect.FieldDescriptor
	fd_AssetDailyStats_countBurned       protoreflect.FieldDescriptor
	fd_AssetDailyStats_issued            protoreflect.FieldDescriptor
	fd_AssetDailyStats_countIssued       protoreflect.FieldDescriptor
	fd_AssetDailyStats_withdraw          protoreflect.FieldDescriptor
	fd_AssetDailyStats_countWithdraw     protoreflect.FieldDescriptor
	fd_AssetDailyStats_refReward         protoreflect.FieldDescriptor
	fd_AssetDailyStats_countRefReward    protoreflect.FieldDescriptor
	fd_AssetDailyStats_sysRefReward      protoreflect.FieldDescriptor
	fd_AssetDailyStats_countSysRefReward protoreflect.FieldDescriptor
)

func init() {
	file_stwartchain_stats_asset_stats_proto_init()
	md_AssetDailyStats = File_stwartchain_stats_asset_stats_proto.Messages().ByName("AssetDailyStats")
	fd_AssetDailyStats_amountWithFee = md_AssetDailyStats.Fields().ByName("amountWithFee")
	fd_AssetDailyStats_amountNoFee = md_AssetDailyStats.Fields().ByName("amountNoFee")
	fd_AssetDailyStats_fee = md_AssetDailyStats.Fields().ByName("fee")
	fd_AssetDailyStats_countWithFee = md_AssetDailyStats.Fields().ByName("countWithFee")
	fd_AssetDailyStats_countNoFee = md_AssetDailyStats.Fields().ByName("countNoFee")
	fd_AssetDailyStats_burned = md_AssetDailyStats.Fields().ByName("burned")
	fd_AssetDailyStats_countBurned = md_AssetDailyStats.Fields().ByName("countBurned")
	fd_AssetDailyStats_issued = md_AssetDailyStats.Fields().ByName("issued")
	fd_AssetDailyStats_countIssued = md_AssetDailyStats.Fields().ByName("countIssued")
	fd_AssetDailyStats_withdraw = md_AssetDailyStats.Fields().ByName("withdraw")
	fd_AssetDailyStats_countWithdraw = md_AssetDailyStats.Fields().ByName("countWithdraw")
	fd_AssetDailyStats_refReward = md_AssetDailyStats.Fields().ByName("refReward")
	fd_AssetDailyStats_countRefReward = md_AssetDailyStats.Fields().ByName("countRefReward")
	fd_AssetDailyStats_sysRefReward = md_AssetDailyStats.Fields().ByName("sysRefReward")
	fd_AssetDailyStats_countSysRefReward = md_AssetDailyStats.Fields().ByName("countSysRefReward")
}

var _ protoreflect.Message = (*fastReflection_AssetDailyStats)(nil)

type fastReflection_AssetDailyStats AssetDailyStats

func (x *AssetDailyStats) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AssetDailyStats)(x)
}

func (x *AssetDailyStats) slowProtoReflect() protoreflect.Message {
	mi := &file_stwartchain_stats_asset_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AssetDailyStats_messageType fastReflection_AssetDailyStats_messageType
var _ protoreflect.MessageType = fastReflection_AssetDailyStats_messageType{}

type fastReflection_AssetDailyStats_messageType struct{}

func (x fastReflection_AssetDailyStats_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AssetDailyStats)(nil)
}
func (x fastReflection_AssetDailyStats_messageType) New() protoreflect.Message {
	return new(fastReflection_AssetDailyStats)
}
func (x fastReflection_AssetDailyStats_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AssetDailyStats
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AssetDailyStats) Descriptor() protoreflect.MessageDescriptor {
	return md_AssetDailyStats
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AssetDailyStats) Type() protoreflect.MessageType {
	return _fastReflection_AssetDailyStats_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AssetDailyStats) New() protoreflect.Message {
	return new(fastReflection_AssetDailyStats)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AssetDailyStats) Interface() protoreflect.ProtoMessage {
	return (*AssetDailyStats)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AssetDailyStats) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.AmountWithFee) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_1_list{list: &x.AmountWithFee})
		if !f(fd_AssetDailyStats_amountWithFee, value) {
			return
		}
	}
	if len(x.AmountNoFee) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_2_list{list: &x.AmountNoFee})
		if !f(fd_AssetDailyStats_amountNoFee, value) {
			return
		}
	}
	if len(x.Fee) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_3_list{list: &x.Fee})
		if !f(fd_AssetDailyStats_fee, value) {
			return
		}
	}
	if x.CountWithFee != int32(0) {
		value := protoreflect.ValueOfInt32(x.CountWithFee)
		if !f(fd_AssetDailyStats_countWithFee, value) {
			return
		}
	}
	if x.CountNoFee != int32(0) {
		value := protoreflect.ValueOfInt32(x.CountNoFee)
		if !f(fd_AssetDailyStats_countNoFee, value) {
			return
		}
	}
	if len(x.Burned) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_6_list{list: &x.Burned})
		if !f(fd_AssetDailyStats_burned, value) {
			return
		}
	}
	if x.CountBurned != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountBurned)
		if !f(fd_AssetDailyStats_countBurned, value) {
			return
		}
	}
	if len(x.Issued) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_8_list{list: &x.Issued})
		if !f(fd_AssetDailyStats_issued, value) {
			return
		}
	}
	if x.CountIssued != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountIssued)
		if !f(fd_AssetDailyStats_countIssued, value) {
			return
		}
	}
	if len(x.Withdraw) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_10_list{list: &x.Withdraw})
		if !f(fd_AssetDailyStats_withdraw, value) {
			return
		}
	}
	if x.CountWithdraw != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountWithdraw)
		if !f(fd_AssetDailyStats_countWithdraw, value) {
			return
		}
	}
	if len(x.RefReward) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_12_list{list: &x.RefReward})
		if !f(fd_AssetDailyStats_refReward, value) {
			return
		}
	}
	if x.CountRefReward != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountRefReward)
		if !f(fd_AssetDailyStats_countRefReward, value) {
			return
		}
	}
	if len(x.SysRefReward) != 0 {
		value := protoreflect.ValueOfList(&_AssetDailyStats_16_list{list: &x.SysRefReward})
		if !f(fd_AssetDailyStats_sysRefReward, value) {
			return
		}
	}
	if x.CountSysRefReward != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountSysRefReward)
		if !f(fd_AssetDailyStats_countSysRefReward, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AssetDailyStats) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stwartchain.stats.AssetDailyStats.amountWithFee":
		return len(x.AmountWithFee) != 0
	case "stwartchain.stats.AssetDailyStats.amountNoFee":
		return len(x.AmountNoFee) != 0
	case "stwartchain.stats.AssetDailyStats.fee":
		return len(x.Fee) != 0
	case "stwartchain.stats.AssetDailyStats.countWithFee":
		return x.CountWithFee != int32(0)
	case "stwartchain.stats.AssetDailyStats.countNoFee":
		return x.CountNoFee != int32(0)
	case "stwartchain.stats.AssetDailyStats.burned":
		return len(x.Burned) != 0
	case "stwartchain.stats.AssetDailyStats.countBurned":
		return x.CountBurned != uint64(0)
	case "stwartchain.stats.AssetDailyStats.issued":
		return len(x.Issued) != 0
	case "stwartchain.stats.AssetDailyStats.countIssued":
		return x.CountIssued != uint64(0)
	case "stwartchain.stats.AssetDailyStats.withdraw":
		return len(x.Withdraw) != 0
	case "stwartchain.stats.AssetDailyStats.countWithdraw":
		return x.CountWithdraw != uint64(0)
	case "stwartchain.stats.AssetDailyStats.refReward":
		return len(x.RefReward) != 0
	case "stwartchain.stats.AssetDailyStats.countRefReward":
		return x.CountRefReward != uint64(0)
	case "stwartchain.stats.AssetDailyStats.sysRefReward":
		return len(x.SysRefReward) != 0
	case "stwartchain.stats.AssetDailyStats.countSysRefReward":
		return x.CountSysRefReward != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.stats.AssetDailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.stats.AssetDailyStats does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetDailyStats) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stwartchain.stats.AssetDailyStats.amountWithFee":
		x.AmountWithFee = nil
	case "stwartchain.stats.AssetDailyStats.amountNoFee":
		x.AmountNoFee = nil
	case "stwartchain.stats.AssetDailyStats.fee":
		x.Fee = nil
	case "stwartchain.stats.AssetDailyStats.countWithFee":
		x.CountWithFee = int32(0)
	case "stwartchain.stats.AssetDailyStats.countNoFee":
		x.CountNoFee = int32(0)
	case "stwartchain.stats.AssetDailyStats.burned":
		x.Burned = nil
	case "stwartchain.stats.AssetDailyStats.countBurned":
		x.CountBurned = uint64(0)
	case "stwartchain.stats.AssetDailyStats.issued":
		x.Issued = nil
	case "stwartchain.stats.AssetDailyStats.countIssued":
		x.CountIssued = uint64(0)
	case "stwartchain.stats.AssetDailyStats.withdraw":
		x.Withdraw = nil
	case "stwartchain.stats.AssetDailyStats.countWithdraw":
		x.CountWithdraw = uint64(0)
	case "stwartchain.stats.AssetDailyStats.refReward":
		x.RefReward = nil
	case "stwartchain.stats.AssetDailyStats.countRefReward":
		x.CountRefReward = uint64(0)
	case "stwartchain.stats.AssetDailyStats.sysRefReward":
		x.SysRefReward = nil
	case "stwartchain.stats.AssetDailyStats.countSysRefReward":
		x.CountSysRefReward = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.stats.AssetDailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.stats.AssetDailyStats does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AssetDailyStats) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stwartchain.stats.AssetDailyStats.amountWithFee":
		if len(x.AmountWithFee) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_1_list{})
		}
		listValue := &_AssetDailyStats_1_list{list: &x.AmountWithFee}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.amountNoFee":
		if len(x.AmountNoFee) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_2_list{})
		}
		listValue := &_AssetDailyStats_2_list{list: &x.AmountNoFee}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.fee":
		if len(x.Fee) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_3_list{})
		}
		listValue := &_AssetDailyStats_3_list{list: &x.Fee}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.countWithFee":
		value := x.CountWithFee
		return protoreflect.ValueOfInt32(value)
	case "stwartchain.stats.AssetDailyStats.countNoFee":
		value := x.CountNoFee
		return protoreflect.ValueOfInt32(value)
	case "stwartchain.stats.AssetDailyStats.burned":
		if len(x.Burned) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_6_list{})
		}
		listValue := &_AssetDailyStats_6_list{list: &x.Burned}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.countBurned":
		value := x.CountBurned
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.stats.AssetDailyStats.issued":
		if len(x.Issued) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_8_list{})
		}
		listValue := &_AssetDailyStats_8_list{list: &x.Issued}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.countIssued":
		value := x.CountIssued
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.stats.AssetDailyStats.withdraw":
		if len(x.Withdraw) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_10_list{})
		}
		listValue := &_AssetDailyStats_10_list{list: &x.Withdraw}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.countWithdraw":
		value := x.CountWithdraw
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.stats.AssetDailyStats.refReward":
		if len(x.RefReward) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_12_list{})
		}
		listValue := &_AssetDailyStats_12_list{list: &x.RefReward}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.countRefReward":
		value := x.CountRefReward
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.stats.AssetDailyStats.sysRefReward":
		if len(x.SysRefReward) == 0 {
			return protoreflect.ValueOfList(&_AssetDailyStats_16_list{})
		}
		listValue := &_AssetDailyStats_16_list{list: &x.SysRefReward}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.stats.AssetDailyStats.countSysRefReward":
		value := x.CountSysRefReward
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.stats.AssetDailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.stats.AssetDailyStats does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetDailyStats) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stwartchain.stats.AssetDailyStats.amountWithFee":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_1_list)
		x.AmountWithFee = *clv.list
	case "stwartchain.stats.AssetDailyStats.amountNoFee":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_2_list)
		x.AmountNoFee = *clv.list
	case "stwartchain.stats.AssetDailyStats.fee":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_3_list)
		x.Fee = *clv.list
	case "stwartchain.stats.AssetDailyStats.countWithFee":
		x.CountWithFee = int32(value.Int())
	case "stwartchain.stats.AssetDailyStats.countNoFee":
		x.CountNoFee = int32(value.Int())
	case "stwartchain.stats.AssetDailyStats.burned":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_6_list)
		x.Burned = *clv.list
	case "stwartchain.stats.AssetDailyStats.countBurned":
		x.CountBurned = value.Uint()
	case "stwartchain.stats.AssetDailyStats.issued":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_8_list)
		x.Issued = *clv.list
	case "stwartchain.stats.AssetDailyStats.countIssued":
		x.CountIssued = value.Uint()
	case "stwartchain.stats.AssetDailyStats.withdraw":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_10_list)
		x.Withdraw = *clv.list
	case "stwartchain.stats.AssetDailyStats.countWithdraw":
		x.CountWithdraw = value.Uint()
	case "stwartchain.stats.AssetDailyStats.refReward":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_12_list)
		x.RefReward = *clv.list
	case "stwartchain.stats.AssetDailyStats.countRefReward":
		x.CountRefReward = value.Uint()
	case "stwartchain.stats.AssetDailyStats.sysRefReward":
		lv := value.List()
		clv := lv.(*_AssetDailyStats_16_list)
		x.SysRefReward = *clv.list
	case "stwartchain.stats.AssetDailyStats.countSysRefReward":
		x.CountSysRefReward = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.stats.AssetDailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.stats.AssetDailyStats does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetDailyStats) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stwartchain.stats.AssetDailyStats.amountWithFee":
		if x.AmountWithFee == nil {
			x.AmountWithFee = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_1_list{list: &x.AmountWithFee}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.amountNoFee":
		if x.AmountNoFee == nil {
			x.AmountNoFee = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_2_list{list: &x.AmountNoFee}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.fee":
		if x.Fee == nil {
			x.Fee = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_3_list{list: &x.Fee}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.burned":
		if x.Burned == nil {
			x.Burned = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_6_list{list: &x.Burned}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.issued":
		if x.Issued == nil {
			x.Issued = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_8_list{list: &x.Issued}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.withdraw":
		if x.Withdraw == nil {
			x.Withdraw = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_10_list{list: &x.Withdraw}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.refReward":
		if x.RefReward == nil {
			x.RefReward = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_12_list{list: &x.RefReward}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.sysRefReward":
		if x.SysRefReward == nil {
			x.SysRefReward = []*v1beta1.Coin{}
		}
		value := &_AssetDailyStats_16_list{list: &x.SysRefReward}
		return protoreflect.ValueOfList(value)
	case "stwartchain.stats.AssetDailyStats.countWithFee":
		panic(fmt.Errorf("field countWithFee of message stwartchain.stats.AssetDailyStats is not mutable"))
	case "stwartchain.stats.AssetDailyStats.countNoFee":
		panic(fmt.Errorf("field countNoFee of message stwartchain.stats.AssetDailyStats is not mutable"))
	case "stwartchain.stats.AssetDailyStats.countBurned":
		panic(fmt.Errorf("field countBurned of message stwartchain.stats.AssetDailyStats is not mutable"))
	case "stwartchain.stats.AssetDailyStats.countIssued":
		panic(fmt.Errorf("field countIssued of message stwartchain.stats.AssetDailyStats is not mutable"))
	case "stwartchain.stats.AssetDailyStats.countWithdraw":
		panic(fmt.Errorf("field countWithdraw of message stwartchain.stats.AssetDailyStats is not mutable"))
	case "stwartchain.stats.AssetDailyStats.countRefReward":
		panic(fmt.Errorf("field countRefReward of message stwartchain.stats.AssetDailyStats is not mutable"))
	case "stwartchain.stats.AssetDailyStats.countSysRefReward":
		panic(fmt.Errorf("field countSysRefReward of message stwartchain.stats.AssetDailyStats is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.stats.AssetDailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.stats.AssetDailyStats does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AssetDailyStats) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stwartchain.stats.AssetDailyStats.amountWithFee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_1_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.amountNoFee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_2_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_3_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.countWithFee":
		return protoreflect.ValueOfInt32(int32(0))
	case "stwartchain.stats.AssetDailyStats.countNoFee":
		return protoreflect.ValueOfInt32(int32(0))
	case "stwartchain.stats.AssetDailyStats.burned":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_6_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.countBurned":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.stats.AssetDailyStats.issued":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_8_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.countIssued":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.stats.AssetDailyStats.withdraw":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_10_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.countWithdraw":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.stats.AssetDailyStats.refReward":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_12_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.countRefReward":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.stats.AssetDailyStats.sysRefReward":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AssetDailyStats_16_list{list: &list})
	case "stwartchain.stats.AssetDailyStats.countSysRefReward":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.stats.AssetDailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.stats.AssetDailyStats does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AssetDailyStats) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stwartchain.stats.AssetDailyStats", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AssetDailyStats) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetDailyStats) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AssetDailyStats) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AssetDailyStats) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AssetDailyStats)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.AmountWithFee) > 0 {
			for _, e := range x.AmountWithFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AmountNoFee) > 0 {
			for _, e := range x.AmountNoFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Fee) > 0 {
			for _, e := range x.Fee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountWithFee != 0 {
			n += 1 + runtime.Sov(uint64(x.CountWithFee))
		}
		if x.CountNoFee != 0 {
			n += 1 + runtime.Sov(uint64(x.CountNoFee))
		}
		if len(x.Burned) > 0 {
			for _, e := range x.Burned {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountBurned != 0 {
			n += 1 + runtime.Sov(uint64(x.CountBurned))
		}
		if len(x.Issued) > 0 {
			for _, e := range x.Issued {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountIssued != 0 {
			n += 1 + runtime.Sov(uint64(x.CountIssued))
		}
		if len(x.Withdraw) > 0 {
			for _, e := range x.Withdraw {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountWithdraw != 0 {
			n += 1 + runtime.Sov(uint64(x.CountWithdraw))
		}
		if len(x.RefReward) > 0 {
			for _, e := range x.RefReward {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountRefReward != 0 {
			n += 1 + runtime.Sov(uint64(x.CountRefReward))
		}
		if len(x.SysRefReward) > 0 {
			for _, e := range x.SysRefReward {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountSysRefReward != 0 {
			n += 2 + runtime.Sov(uint64(x.CountSysRefReward))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AssetDailyStats)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CountSysRefReward != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountSysRefReward))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if len(x.SysRefReward) > 0 {
			for iNdEx := len(x.SysRefReward) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SysRefReward[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x82
			}
		}
		if x.CountRefReward != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountRefReward))
			i--
			dAtA[i] = 0x68
		}
		if len(x.RefReward) > 0 {
			for iNdEx := len(x.RefReward) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RefReward[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if x.CountWithdraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountWithdraw))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Withdraw) > 0 {
			for iNdEx := len(x.Withdraw) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Withdraw[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.CountIssued != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountIssued))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Issued) > 0 {
			for iNdEx := len(x.Issued) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Issued[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.CountBurned != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountBurned))
			i--
			dAtA[i] = 0x38
		}
		if len(x.Burned) > 0 {
			for iNdEx := len(x.Burned) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Burned[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.CountNoFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountNoFee))
			i--
			dAtA[i] = 0x28
		}
		if x.CountWithFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountWithFee))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Fee) > 0 {
			for iNdEx := len(x.Fee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Fee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.AmountNoFee) > 0 {
			for iNdEx := len(x.AmountNoFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AmountNoFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.AmountWithFee) > 0 {
			for iNdEx := len(x.AmountWithFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AmountWithFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AssetDailyStats)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssetDailyStats: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssetDailyStats: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountWithFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountWithFee = append(x.AmountWithFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AmountWithFee[len(x.AmountWithFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountNoFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountNoFee = append(x.AmountNoFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AmountNoFee[len(x.AmountNoFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Fee = append(x.Fee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Fee[len(x.Fee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountWithFee", wireType)
				}
				x.CountWithFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountWithFee |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountNoFee", wireType)
				}
				x.CountNoFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountNoFee |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Burned", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Burned = append(x.Burned, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Burned[len(x.Burned)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountBurned", wireType)
				}
				x.CountBurned = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountBurned |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Issued", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Issued = append(x.Issued, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Issued[len(x.Issued)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountIssued", wireType)
				}
				x.CountIssued = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountIssued |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Withdraw = append(x.Withdraw, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Withdraw[len(x.Withdraw)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountWithdraw", wireType)
				}
				x.CountWithdraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountWithdraw |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RefReward", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RefReward = append(x.RefReward, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RefReward[len(x.RefReward)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountRefReward", wireType)
				}
				x.CountRefReward = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountRefReward |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SysRefReward", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SysRefReward = append(x.SysRefReward, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SysRefReward[len(x.SysRefReward)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountSysRefReward", wireType)
				}
				x.CountSysRefReward = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountSysRefReward |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: stwartchain/stats/asset_stats.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetDailyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fee policy module
	AmountWithFee []*v1beta1.Coin `protobuf:"bytes,1,rep,name=amountWithFee,proto3" json:"amountWithFee,omitempty"`
	AmountNoFee   []*v1beta1.Coin `protobuf:"bytes,2,rep,name=amountNoFee,proto3" json:"amountNoFee,omitempty"`
	Fee           []*v1beta1.Coin `protobuf:"bytes,3,rep,name=fee,proto3" json:"fee,omitempty"`
	CountWithFee  int32           `protobuf:"varint,4,opt,name=countWithFee,proto3" json:"countWithFee,omitempty"`
	CountNoFee    int32           `protobuf:"varint,5,opt,name=countNoFee,proto3" json:"countNoFee,omitempty"`
	// core module
	Burned            []*v1beta1.Coin `protobuf:"bytes,6,rep,name=burned,proto3" json:"burned,omitempty"`
	CountBurned       uint64          `protobuf:"varint,7,opt,name=countBurned,proto3" json:"countBurned,omitempty"`
	Issued            []*v1beta1.Coin `protobuf:"bytes,8,rep,name=issued,proto3" json:"issued,omitempty"`
	CountIssued       uint64          `protobuf:"varint,9,opt,name=countIssued,proto3" json:"countIssued,omitempty"`
	Withdraw          []*v1beta1.Coin `protobuf:"bytes,10,rep,name=withdraw,proto3" json:"withdraw,omitempty"`
	CountWithdraw     uint64          `protobuf:"varint,11,opt,name=countWithdraw,proto3" json:"countWithdraw,omitempty"`
	RefReward         []*v1beta1.Coin `protobuf:"bytes,12,rep,name=refReward,proto3" json:"refReward,omitempty"`
	CountRefReward    uint64          `protobuf:"varint,13,opt,name=countRefReward,proto3" json:"countRefReward,omitempty"`
	SysRefReward      []*v1beta1.Coin `protobuf:"bytes,16,rep,name=sysRefReward,proto3" json:"sysRefReward,omitempty"`
	CountSysRefReward uint64          `protobuf:"varint,17,opt,name=countSysRefReward,proto3" json:"countSysRefReward,omitempty"`
}

func (x *AssetDailyStats) Reset() {
	*x = AssetDailyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stwartchain_stats_asset_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetDailyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetDailyStats) ProtoMessage() {}

// Deprecated: Use AssetDailyStats.ProtoReflect.Descriptor instead.
func (*AssetDailyStats) Descriptor() ([]byte, []int) {
	return file_stwartchain_stats_asset_stats_proto_rawDescGZIP(), []int{0}
}

func (x *AssetDailyStats) GetAmountWithFee() []*v1beta1.Coin {
	if x != nil {
		return x.AmountWithFee
	}
	return nil
}

func (x *AssetDailyStats) GetAmountNoFee() []*v1beta1.Coin {
	if x != nil {
		return x.AmountNoFee
	}
	return nil
}

func (x *AssetDailyStats) GetFee() []*v1beta1.Coin {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *AssetDailyStats) GetCountWithFee() int32 {
	if x != nil {
		return x.CountWithFee
	}
	return 0
}

func (x *AssetDailyStats) GetCountNoFee() int32 {
	if x != nil {
		return x.CountNoFee
	}
	return 0
}

func (x *AssetDailyStats) GetBurned() []*v1beta1.Coin {
	if x != nil {
		return x.Burned
	}
	return nil
}

func (x *AssetDailyStats) GetCountBurned() uint64 {
	if x != nil {
		return x.CountBurned
	}
	return 0
}

func (x *AssetDailyStats) GetIssued() []*v1beta1.Coin {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *AssetDailyStats) GetCountIssued() uint64 {
	if x != nil {
		return x.CountIssued
	}
	return 0
}

func (x *AssetDailyStats) GetWithdraw() []*v1beta1.Coin {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

func (x *AssetDailyStats) GetCountWithdraw() uint64 {
	if x != nil {
		return x.CountWithdraw
	}
	return 0
}

func (x *AssetDailyStats) GetRefReward() []*v1beta1.Coin {
	if x != nil {
		return x.RefReward
	}
	return nil
}

func (x *AssetDailyStats) GetCountRefReward() uint64 {
	if x != nil {
		return x.CountRefReward
	}
	return 0
}

func (x *AssetDailyStats) GetSysRefReward() []*v1beta1.Coin {
	if x != nil {
		return x.SysRefReward
	}
	return nil
}

func (x *AssetDailyStats) GetCountSysRefReward() uint64 {
	if x != nil {
		return x.CountSysRefReward
	}
	return 0
}

var File_stwartchain_stats_asset_stats_proto protoreflect.FileDescriptor

var file_stwartchain_stats_asset_stats_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85,
	0x06, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x46, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x46, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3d, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x52,
	0x65, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x79, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x52, 0x65, 0x66,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0xb1, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x22, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x11,
	0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0xca, 0x02, 0x11, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0xe2, 0x02, 0x1d, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_stwartchain_stats_asset_stats_proto_rawDescOnce sync.Once
	file_stwartchain_stats_asset_stats_proto_rawDescData = file_stwartchain_stats_asset_stats_proto_rawDesc
)

func file_stwartchain_stats_asset_stats_proto_rawDescGZIP() []byte {
	file_stwartchain_stats_asset_stats_proto_rawDescOnce.Do(func() {
		file_stwartchain_stats_asset_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_stwartchain_stats_asset_stats_proto_rawDescData)
	})
	return file_stwartchain_stats_asset_stats_proto_rawDescData
}

var file_stwartchain_stats_asset_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_stwartchain_stats_asset_stats_proto_goTypes = []interface{}{
	(*AssetDailyStats)(nil), // 0: stwartchain.stats.AssetDailyStats
	(*v1beta1.Coin)(nil),    // 1: cosmos.base.v1beta1.Coin
}
var file_stwartchain_stats_asset_stats_proto_depIdxs = []int32{
	1, // 0: stwartchain.stats.AssetDailyStats.amountWithFee:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: stwartchain.stats.AssetDailyStats.amountNoFee:type_name -> cosmos.base.v1beta1.Coin
	1, // 2: stwartchain.stats.AssetDailyStats.fee:type_name -> cosmos.base.v1beta1.Coin
	1, // 3: stwartchain.stats.AssetDailyStats.burned:type_name -> cosmos.base.v1beta1.Coin
	1, // 4: stwartchain.stats.AssetDailyStats.issued:type_name -> cosmos.base.v1beta1.Coin
	1, // 5: stwartchain.stats.AssetDailyStats.withdraw:type_name -> cosmos.base.v1beta1.Coin
	1, // 6: stwartchain.stats.AssetDailyStats.refReward:type_name -> cosmos.base.v1beta1.Coin
	1, // 7: stwartchain.stats.AssetDailyStats.sysRefReward:type_name -> cosmos.base.v1beta1.Coin
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_stwartchain_stats_asset_stats_proto_init() }
func file_stwartchain_stats_asset_stats_proto_init() {
	if File_stwartchain_stats_asset_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stwartchain_stats_asset_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetDailyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stwartchain_stats_asset_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stwartchain_stats_asset_stats_proto_goTypes,
		DependencyIndexes: file_stwartchain_stats_asset_stats_proto_depIdxs,
		MessageInfos:      file_stwartchain_stats_asset_stats_proto_msgTypes,
	}.Build()
	File_stwartchain_stats_asset_stats_proto = out.File
	file_stwartchain_stats_asset_stats_proto_rawDesc = nil
	file_stwartchain_stats_asset_stats_proto_goTypes = nil
	file_stwartchain_stats_asset_stats_proto_depIdxs = nil
}
