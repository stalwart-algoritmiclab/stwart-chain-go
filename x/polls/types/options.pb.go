// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/polls/options.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Options struct {
	Id           uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VotersCount  uint64       `protobuf:"varint,2,opt,name=votersCount,proto3" json:"votersCount,omitempty"`
	TokensAmount []types.Coin `protobuf:"bytes,3,rep,name=tokensAmount,proto3" json:"tokensAmount"`
	IsVeto       bool         `protobuf:"varint,4,opt,name=isVeto,proto3" json:"isVeto,omitempty"`
	Text         string       `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	IsVinner     bool         `protobuf:"varint,6,opt,name=isVinner,proto3" json:"isVinner,omitempty"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade00bcdb735b05c, []int{0}
}
func (m *Options) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Options.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return m.Size()
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Options) GetVotersCount() uint64 {
	if m != nil {
		return m.VotersCount
	}
	return 0
}

func (m *Options) GetTokensAmount() []types.Coin {
	if m != nil {
		return m.TokensAmount
	}
	return nil
}

func (m *Options) GetIsVeto() bool {
	if m != nil {
		return m.IsVeto
	}
	return false
}

func (m *Options) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Options) GetIsVinner() bool {
	if m != nil {
		return m.IsVinner
	}
	return false
}

func init() {
	proto.RegisterType((*Options)(nil), "stwartchain.polls.Options")
}

func init() { proto.RegisterFile("stwartchain/polls/options.proto", fileDescriptor_ade00bcdb735b05c) }

var fileDescriptor_ade00bcdb735b05c = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4e, 0x2a, 0x31,
	0x14, 0x86, 0xa7, 0x30, 0x97, 0x8b, 0xc5, 0x98, 0xd8, 0x18, 0x33, 0xb2, 0x28, 0x13, 0x57, 0xb3,
	0xb1, 0x0d, 0xfa, 0x04, 0xc0, 0x03, 0x98, 0xcc, 0x82, 0x85, 0xae, 0x3a, 0x43, 0x03, 0x95, 0xa1,
	0x67, 0x32, 0x3d, 0x22, 0xbe, 0x85, 0x8f, 0xc5, 0x92, 0xa5, 0x2b, 0x63, 0xe0, 0x45, 0xcc, 0x74,
	0x88, 0xc1, 0xdd, 0x39, 0xfd, 0xbf, 0xd3, 0x3f, 0xf9, 0xe8, 0xc0, 0xe1, 0x9b, 0xaa, 0x30, 0x5f,
	0x28, 0x63, 0x65, 0x09, 0x45, 0xe1, 0x24, 0x94, 0x68, 0xc0, 0x3a, 0x51, 0x56, 0x80, 0xc0, 0x2e,
	0x4f, 0x00, 0xe1, 0x81, 0xfe, 0xd5, 0x1c, 0xe6, 0xe0, 0x53, 0x59, 0x4f, 0x0d, 0xd8, 0xe7, 0x39,
	0xb8, 0x15, 0x38, 0x99, 0x29, 0xa7, 0xe5, 0x7a, 0x98, 0x69, 0x54, 0x43, 0x99, 0x43, 0x7d, 0x55,
	0xe7, 0xb7, 0x5b, 0x42, 0xff, 0x3f, 0x36, 0x5f, 0xb3, 0x0b, 0xda, 0x32, 0xb3, 0x88, 0xc4, 0x24,
	0x09, 0xd3, 0x96, 0x99, 0xb1, 0x98, 0xf6, 0xd6, 0x80, 0xba, 0x72, 0x13, 0x78, 0xb5, 0x18, 0xb5,
	0x7c, 0x70, 0xfa, 0xc4, 0x26, 0xf4, 0x1c, 0x61, 0xa9, 0xad, 0x1b, 0xad, 0x3c, 0xd2, 0x8e, 0xdb,
	0x49, 0xef, 0xfe, 0x46, 0x34, 0xa5, 0xa2, 0x2e, 0x15, 0xc7, 0x52, 0x31, 0x01, 0x63, 0xc7, 0xe1,
	0xf6, 0x6b, 0x10, 0xa4, 0x7f, 0x8e, 0xd8, 0x35, 0xed, 0x18, 0x37, 0xd5, 0x08, 0x51, 0x18, 0x93,
	0xa4, 0x9b, 0x1e, 0x37, 0xc6, 0x68, 0x88, 0x7a, 0x83, 0xd1, 0xbf, 0x98, 0x24, 0x67, 0xa9, 0x9f,
	0x59, 0x9f, 0x76, 0x8d, 0x9b, 0x1a, 0x6b, 0x75, 0x15, 0x75, 0x3c, 0xfd, 0xbb, 0x8f, 0x9f, 0xb7,
	0x7b, 0x4e, 0x76, 0x7b, 0x4e, 0xbe, 0xf7, 0x9c, 0x7c, 0x1c, 0x78, 0xb0, 0x3b, 0xf0, 0xe0, 0xf3,
	0xc0, 0x83, 0xa7, 0xd1, 0xdc, 0x60, 0xa1, 0x32, 0xe1, 0x50, 0x15, 0xb5, 0x36, 0x81, 0x3a, 0x5f,
	0x48, 0xf3, 0x62, 0x40, 0xae, 0x6a, 0xc3, 0x99, 0xca, 0x97, 0xda, 0xce, 0x64, 0x23, 0xf5, 0xae,
	0xd1, 0xbe, 0x39, 0x8a, 0xc7, 0xf7, 0x52, 0xbb, 0xac, 0xe3, 0x75, 0x3d, 0xfc, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x44, 0xb3, 0x28, 0xdd, 0x9a, 0x01, 0x00, 0x00,
}

func (m *Options) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Options) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Options) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVinner {
		i--
		if m.IsVinner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsVeto {
		i--
		if m.IsVeto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokensAmount) > 0 {
		for iNdEx := len(m.TokensAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokensAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.VotersCount != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.VotersCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Options) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOptions(uint64(m.Id))
	}
	if m.VotersCount != 0 {
		n += 1 + sovOptions(uint64(m.VotersCount))
	}
	if len(m.TokensAmount) > 0 {
		for _, e := range m.TokensAmount {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if m.IsVeto {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.IsVinner {
		n += 2
	}
	return n
}

func sovOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Options) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotersCount", wireType)
			}
			m.VotersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokensAmount = append(m.TokensAmount, types.Coin{})
			if err := m.TokensAmount[len(m.TokensAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVeto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVeto = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVinner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVinner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptions = fmt.Errorf("proto: unexpected end of group")
)
