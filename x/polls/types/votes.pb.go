// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/polls/votes.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Votes struct {
	Id             uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountAddress string       `protobuf:"bytes,2,opt,name=accountAddress,proto3" json:"accountAddress,omitempty"`
	PollId         uint64       `protobuf:"varint,3,opt,name=pollId,proto3" json:"pollId,omitempty"`
	OptionId       uint64       `protobuf:"varint,4,opt,name=optionId,proto3" json:"optionId,omitempty"`
	Amount         []types.Coin `protobuf:"bytes,5,rep,name=amount,proto3" json:"amount"`
}

func (m *Votes) Reset()         { *m = Votes{} }
func (m *Votes) String() string { return proto.CompactTextString(m) }
func (*Votes) ProtoMessage()    {}
func (*Votes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3096104dee4b6d6, []int{0}
}
func (m *Votes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Votes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Votes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Votes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Votes.Merge(m, src)
}
func (m *Votes) XXX_Size() int {
	return m.Size()
}
func (m *Votes) XXX_DiscardUnknown() {
	xxx_messageInfo_Votes.DiscardUnknown(m)
}

var xxx_messageInfo_Votes proto.InternalMessageInfo

func (m *Votes) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Votes) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *Votes) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *Votes) GetOptionId() uint64 {
	if m != nil {
		return m.OptionId
	}
	return 0
}

func (m *Votes) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*Votes)(nil), "stwartchain.polls.Votes")
}

func init() { proto.RegisterFile("stwartchain/polls/votes.proto", fileDescriptor_b3096104dee4b6d6) }

var fileDescriptor_b3096104dee4b6d6 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0x09, 0x8c, 0x54, 0x09, 0x0b, 0xa1, 0x50, 0x09, 0x53, 0x31, 0xa0, 0x2e,
	0xd8, 0x2a, 0x0c, 0xcc, 0x2d, 0x53, 0xd7, 0x0c, 0x0c, 0x30, 0x39, 0xb6, 0x95, 0x1a, 0x92, 0xdc,
	0x28, 0x36, 0x05, 0xde, 0x82, 0x07, 0xe1, 0x41, 0x3a, 0x76, 0x64, 0x42, 0x28, 0x79, 0x11, 0xe4,
	0x24, 0x42, 0x88, 0xcd, 0xd7, 0xdf, 0xbd, 0x47, 0x47, 0x1f, 0x3e, 0xb5, 0xee, 0x45, 0x94, 0x4e,
	0xae, 0x85, 0xc9, 0x79, 0x01, 0x69, 0x6a, 0xf9, 0x06, 0x9c, 0xb6, 0xac, 0x28, 0xc1, 0x01, 0x39,
	0xfc, 0x83, 0x59, 0x83, 0x27, 0x47, 0x09, 0x24, 0xd0, 0x50, 0xee, 0x5f, 0xed, 0xe2, 0x84, 0x4a,
	0xb0, 0x19, 0x58, 0x1e, 0x0b, 0xab, 0xf9, 0x66, 0x1e, 0x6b, 0x27, 0xe6, 0x5c, 0x82, 0xbf, 0xf2,
	0xfc, 0xfc, 0x03, 0xe1, 0xe1, 0x9d, 0x0f, 0x26, 0x63, 0xdc, 0x33, 0x2a, 0x44, 0x53, 0x34, 0x1b,
	0x44, 0x3d, 0xa3, 0xc8, 0x05, 0x1e, 0x0b, 0x29, 0xe1, 0x39, 0x77, 0x0b, 0xa5, 0x4a, 0x6d, 0x6d,
	0xd8, 0x9b, 0xa2, 0xd9, 0x7e, 0xf4, 0xef, 0x97, 0x1c, 0xe3, 0x91, 0x2f, 0xb0, 0x52, 0x61, 0xbf,
	0xb9, 0xed, 0x26, 0x32, 0xc1, 0x7b, 0x50, 0x38, 0x03, 0xf9, 0x4a, 0x85, 0x83, 0x86, 0xfc, 0xce,
	0xe4, 0x06, 0x8f, 0x44, 0xe6, 0x43, 0xc2, 0xe1, 0xb4, 0x3f, 0x3b, 0xb8, 0x3a, 0x61, 0x6d, 0x4d,
	0xe6, 0x6b, 0xb2, 0xae, 0x26, 0xbb, 0x05, 0x93, 0x2f, 0x07, 0xdb, 0xaf, 0xb3, 0x20, 0xea, 0xd6,
	0x97, 0x0f, 0xdb, 0x8a, 0xa2, 0x5d, 0x45, 0xd1, 0x77, 0x45, 0xd1, 0x7b, 0x4d, 0x83, 0x5d, 0x4d,
	0x83, 0xcf, 0x9a, 0x06, 0xf7, 0x8b, 0xc4, 0xb8, 0x54, 0xc4, 0xcc, 0x3a, 0x91, 0x7a, 0x35, 0xcc,
	0x69, 0xb9, 0xe6, 0xe6, 0xd1, 0x00, 0xcf, 0xbc, 0xc3, 0x58, 0xc8, 0x27, 0x9d, 0x2b, 0xde, 0x8a,
	0xbb, 0x6c, 0xc5, 0xbe, 0x76, 0x6a, 0xdd, 0x5b, 0xa1, 0x6d, 0x3c, 0x6a, 0x94, 0x5c, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x06, 0x05, 0xfd, 0xb2, 0x7c, 0x01, 0x00, 0x00,
}

func (m *Votes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Votes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Votes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVotes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.OptionId != 0 {
		i = encodeVarintVotes(dAtA, i, uint64(m.OptionId))
		i--
		dAtA[i] = 0x20
	}
	if m.PollId != 0 {
		i = encodeVarintVotes(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintVotes(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVotes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVotes(dAtA []byte, offset int, v uint64) int {
	offset -= sovVotes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Votes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVotes(uint64(m.Id))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovVotes(uint64(l))
	}
	if m.PollId != 0 {
		n += 1 + sovVotes(uint64(m.PollId))
	}
	if m.OptionId != 0 {
		n += 1 + sovVotes(uint64(m.OptionId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovVotes(uint64(l))
		}
	}
	return n
}

func sovVotes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVotes(x uint64) (n int) {
	return sovVotes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Votes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Votes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Votes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionId", wireType)
			}
			m.OptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVotes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVotes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVotes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVotes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVotes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVotes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVotes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVotes = fmt.Errorf("proto: unexpected end of group")
)
