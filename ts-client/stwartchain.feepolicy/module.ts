// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryAllAddressesResponse } from "./types/stwartchain/feepolicy/query";
import { QueryGetTariffRequest } from "./types/stwartchain/feepolicy/query";
import { MsgUpdateParams } from "./types/stwartchain/feepolicy/tx";
import { MsgDeleteAddresses } from "./types/stwartchain/feepolicy/tx";
import { Address } from "./types/stwartchain/feepolicy/addresses";
import { QueryParamsResponse } from "./types/stwartchain/feepolicy/query";
import { QueryGetTariffResponse } from "./types/stwartchain/feepolicy/query";
import { QueryGetTariffsResponse } from "./types/stwartchain/feepolicy/query";
import { QueryAllTariffsResponse } from "./types/stwartchain/feepolicy/query";
import { MsgDeleteAddressesResponse } from "./types/stwartchain/feepolicy/tx";
import { MsgDeleteTariffs } from "./types/stwartchain/feepolicy/tx";
import { QueryAllTariffResponse } from "./types/stwartchain/feepolicy/query";
import { QueryGetAddressByIDRequest } from "./types/stwartchain/feepolicy/query";
import { QueryGetAddressResponse } from "./types/stwartchain/feepolicy/query";
import { MsgCreateTariffs } from "./types/stwartchain/feepolicy/tx";
import { MsgCreateTariffsResponse } from "./types/stwartchain/feepolicy/tx";
import { QueryGetAddressesResponse } from "./types/stwartchain/feepolicy/query";
import { QueryAllAddressesRequest } from "./types/stwartchain/feepolicy/query";
import { Tariff } from "./types/stwartchain/feepolicy/tariff";
import { Params } from "./types/stwartchain/feepolicy/params";
import { MsgUpdateAddresses } from "./types/stwartchain/feepolicy/tx";
import { MsgDeleteTariffsResponse } from "./types/stwartchain/feepolicy/tx";
import { QueryGetTariffsRequest } from "./types/stwartchain/feepolicy/query";
import { MsgUpdateParamsResponse } from "./types/stwartchain/feepolicy/tx";
import { MsgCreateAddressesResponse } from "./types/stwartchain/feepolicy/tx";
import { QueryAllTariffRequest } from "./types/stwartchain/feepolicy/query";
import { MsgUpdateTariffsResponse } from "./types/stwartchain/feepolicy/tx";
import { QueryGetAddressesRequest } from "./types/stwartchain/feepolicy/query";
import { MsgUpdateTariffs } from "./types/stwartchain/feepolicy/tx";
import { GenesisState } from "./types/stwartchain/feepolicy/genesis";
import { QueryAllTariffsRequest } from "./types/stwartchain/feepolicy/query";
import { Tariffs } from "./types/stwartchain/feepolicy/tariffs";
import { MsgCreateAddresses } from "./types/stwartchain/feepolicy/tx";
import { QueryParamsRequest } from "./types/stwartchain/feepolicy/query";
import { QueryGetAddressRequest } from "./types/stwartchain/feepolicy/query";
import { MsgUpdateAddressesResponse } from "./types/stwartchain/feepolicy/tx";
import { Fees } from "./types/stwartchain/feepolicy/fees";


export { QueryAllAddressesResponse, QueryGetTariffRequest, MsgUpdateParams, MsgDeleteAddresses, Address, QueryParamsResponse, QueryGetTariffResponse, QueryGetTariffsResponse, QueryAllTariffsResponse, MsgDeleteAddressesResponse, MsgDeleteTariffs, QueryAllTariffResponse, QueryGetAddressByIDRequest, QueryGetAddressResponse, MsgCreateTariffs, MsgCreateTariffsResponse, QueryGetAddressesResponse, QueryAllAddressesRequest, Tariff, Params, MsgUpdateAddresses, MsgDeleteTariffsResponse, QueryGetTariffsRequest, MsgUpdateParamsResponse, MsgCreateAddressesResponse, QueryAllTariffRequest, MsgUpdateTariffsResponse, QueryGetAddressesRequest, MsgUpdateTariffs, GenesisState, QueryAllTariffsRequest, Tariffs, MsgCreateAddresses, QueryParamsRequest, QueryGetAddressRequest, MsgUpdateAddressesResponse, Fees };

type sendQueryAllAddressesResponseParams = {
  value: QueryAllAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTariffRequestParams = {
  value: QueryGetTariffRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAddressesParams = {
  value: MsgDeleteAddresses,
  fee?: StdFee,
  memo?: string
};

type sendAddressParams = {
  value: Address,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTariffResponseParams = {
  value: QueryGetTariffResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTariffsResponseParams = {
  value: QueryGetTariffsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTariffsResponseParams = {
  value: QueryAllTariffsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAddressesResponseParams = {
  value: MsgDeleteAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteTariffsParams = {
  value: MsgDeleteTariffs,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTariffResponseParams = {
  value: QueryAllTariffResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressByIDRequestParams = {
  value: QueryGetAddressByIDRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressResponseParams = {
  value: QueryGetAddressResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTariffsParams = {
  value: MsgCreateTariffs,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTariffsResponseParams = {
  value: MsgCreateTariffsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressesResponseParams = {
  value: QueryGetAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllAddressesRequestParams = {
  value: QueryAllAddressesRequest,
  fee?: StdFee,
  memo?: string
};

type sendTariffParams = {
  value: Tariff,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateAddressesParams = {
  value: MsgUpdateAddresses,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteTariffsResponseParams = {
  value: MsgDeleteTariffsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTariffsRequestParams = {
  value: QueryGetTariffsRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAddressesResponseParams = {
  value: MsgCreateAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTariffRequestParams = {
  value: QueryAllTariffRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateTariffsResponseParams = {
  value: MsgUpdateTariffsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressesRequestParams = {
  value: QueryGetAddressesRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateTariffsParams = {
  value: MsgUpdateTariffs,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTariffsRequestParams = {
  value: QueryAllTariffsRequest,
  fee?: StdFee,
  memo?: string
};

type sendTariffsParams = {
  value: Tariffs,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAddressesParams = {
  value: MsgCreateAddresses,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAddressRequestParams = {
  value: QueryGetAddressRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateAddressesResponseParams = {
  value: MsgUpdateAddressesResponse,
  fee?: StdFee,
  memo?: string
};

type sendFeesParams = {
  value: Fees,
  fee?: StdFee,
  memo?: string
};


type queryAllAddressesResponseParams = {
  value: QueryAllAddressesResponse,
};

type queryGetTariffRequestParams = {
  value: QueryGetTariffRequest,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgDeleteAddressesParams = {
  value: MsgDeleteAddresses,
};

type addressParams = {
  value: Address,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryGetTariffResponseParams = {
  value: QueryGetTariffResponse,
};

type queryGetTariffsResponseParams = {
  value: QueryGetTariffsResponse,
};

type queryAllTariffsResponseParams = {
  value: QueryAllTariffsResponse,
};

type msgDeleteAddressesResponseParams = {
  value: MsgDeleteAddressesResponse,
};

type msgDeleteTariffsParams = {
  value: MsgDeleteTariffs,
};

type queryAllTariffResponseParams = {
  value: QueryAllTariffResponse,
};

type queryGetAddressByIdrequestParams = {
  value: QueryGetAddressByIDRequest,
};

type queryGetAddressResponseParams = {
  value: QueryGetAddressResponse,
};

type msgCreateTariffsParams = {
  value: MsgCreateTariffs,
};

type msgCreateTariffsResponseParams = {
  value: MsgCreateTariffsResponse,
};

type queryGetAddressesResponseParams = {
  value: QueryGetAddressesResponse,
};

type queryAllAddressesRequestParams = {
  value: QueryAllAddressesRequest,
};

type tariffParams = {
  value: Tariff,
};

type paramsParams = {
  value: Params,
};

type msgUpdateAddressesParams = {
  value: MsgUpdateAddresses,
};

type msgDeleteTariffsResponseParams = {
  value: MsgDeleteTariffsResponse,
};

type queryGetTariffsRequestParams = {
  value: QueryGetTariffsRequest,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgCreateAddressesResponseParams = {
  value: MsgCreateAddressesResponse,
};

type queryAllTariffRequestParams = {
  value: QueryAllTariffRequest,
};

type msgUpdateTariffsResponseParams = {
  value: MsgUpdateTariffsResponse,
};

type queryGetAddressesRequestParams = {
  value: QueryGetAddressesRequest,
};

type msgUpdateTariffsParams = {
  value: MsgUpdateTariffs,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryAllTariffsRequestParams = {
  value: QueryAllTariffsRequest,
};

type tariffsParams = {
  value: Tariffs,
};

type msgCreateAddressesParams = {
  value: MsgCreateAddresses,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetAddressRequestParams = {
  value: QueryGetAddressRequest,
};

type msgUpdateAddressesResponseParams = {
  value: MsgUpdateAddressesResponse,
};

type feesParams = {
  value: Fees,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryAllAddressesResponse({ value, fee, memo }: sendQueryAllAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllAddressesResponse({ value: QueryAllAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTariffRequest({ value, fee, memo }: sendQueryGetTariffRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTariffRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTariffRequest({ value: QueryGetTariffRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTariffRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteAddresses({ value, fee, memo }: sendMsgDeleteAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteAddresses({ value: MsgDeleteAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendAddress({ value, fee, memo }: sendAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.address({ value: Address.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTariffResponse({ value, fee, memo }: sendQueryGetTariffResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTariffResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTariffResponse({ value: QueryGetTariffResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTariffResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTariffsResponse({ value, fee, memo }: sendQueryGetTariffsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTariffsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTariffsResponse({ value: QueryGetTariffsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTariffsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTariffsResponse({ value, fee, memo }: sendQueryAllTariffsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTariffsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTariffsResponse({ value: QueryAllTariffsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTariffsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteAddressesResponse({ value, fee, memo }: sendMsgDeleteAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteAddressesResponse({ value: MsgDeleteAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteTariffs({ value, fee, memo }: sendMsgDeleteTariffsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteTariffs: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteTariffs({ value: MsgDeleteTariffs.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteTariffs: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTariffResponse({ value, fee, memo }: sendQueryAllTariffResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTariffResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTariffResponse({ value: QueryAllTariffResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTariffResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressByIDRequest({ value, fee, memo }: sendQueryGetAddressByIDRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressByIDRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressByIdrequest({ value: QueryGetAddressByIDRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressByIDRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressResponse({ value, fee, memo }: sendQueryGetAddressResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressResponse({ value: QueryGetAddressResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTariffs({ value, fee, memo }: sendMsgCreateTariffsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTariffs: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTariffs({ value: MsgCreateTariffs.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTariffs: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTariffsResponse({ value, fee, memo }: sendMsgCreateTariffsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTariffsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTariffsResponse({ value: MsgCreateTariffsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTariffsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressesResponse({ value, fee, memo }: sendQueryGetAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressesResponse({ value: QueryGetAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllAddressesRequest({ value, fee, memo }: sendQueryAllAddressesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllAddressesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllAddressesRequest({ value: QueryAllAddressesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllAddressesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTariff({ value, fee, memo }: sendTariffParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTariff: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.tariff({ value: Tariff.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTariff: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateAddresses({ value, fee, memo }: sendMsgUpdateAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateAddresses({ value: MsgUpdateAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteTariffsResponse({ value, fee, memo }: sendMsgDeleteTariffsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteTariffsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteTariffsResponse({ value: MsgDeleteTariffsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteTariffsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTariffsRequest({ value, fee, memo }: sendQueryGetTariffsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTariffsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTariffsRequest({ value: QueryGetTariffsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTariffsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAddressesResponse({ value, fee, memo }: sendMsgCreateAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateAddressesResponse({ value: MsgCreateAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTariffRequest({ value, fee, memo }: sendQueryAllTariffRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTariffRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTariffRequest({ value: QueryAllTariffRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTariffRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateTariffsResponse({ value, fee, memo }: sendMsgUpdateTariffsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateTariffsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateTariffsResponse({ value: MsgUpdateTariffsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateTariffsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressesRequest({ value, fee, memo }: sendQueryGetAddressesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressesRequest({ value: QueryGetAddressesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateTariffs({ value, fee, memo }: sendMsgUpdateTariffsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateTariffs: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateTariffs({ value: MsgUpdateTariffs.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateTariffs: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTariffsRequest({ value, fee, memo }: sendQueryAllTariffsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTariffsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTariffsRequest({ value: QueryAllTariffsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTariffsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTariffs({ value, fee, memo }: sendTariffsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTariffs: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.tariffs({ value: Tariffs.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTariffs: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAddresses({ value, fee, memo }: sendMsgCreateAddressesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAddresses: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateAddresses({ value: MsgCreateAddresses.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAddresses: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAddressRequest({ value, fee, memo }: sendQueryGetAddressRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAddressRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAddressRequest({ value: QueryGetAddressRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAddressRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateAddressesResponse({ value, fee, memo }: sendMsgUpdateAddressesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateAddressesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateAddressesResponse({ value: MsgUpdateAddressesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateAddressesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendFees({ value, fee, memo }: sendFeesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendFees: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.fees({ value: Fees.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendFees: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryAllAddressesResponse({ value }: queryAllAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryAllAddressesResponse", value: QueryAllAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTariffRequest({ value }: queryGetTariffRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetTariffRequest", value: QueryGetTariffRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTariffRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteAddresses({ value }: msgDeleteAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgDeleteAddresses", value: MsgDeleteAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteAddresses: Could not create message: ' + e.message)
			}
		},
		
		address({ value }: addressParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.Address", value: Address.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Address: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTariffResponse({ value }: queryGetTariffResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetTariffResponse", value: QueryGetTariffResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTariffResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTariffsResponse({ value }: queryGetTariffsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetTariffsResponse", value: QueryGetTariffsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTariffsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllTariffsResponse({ value }: queryAllTariffsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryAllTariffsResponse", value: QueryAllTariffsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTariffsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteAddressesResponse({ value }: msgDeleteAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgDeleteAddressesResponse", value: MsgDeleteAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteTariffs({ value }: msgDeleteTariffsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgDeleteTariffs", value: MsgDeleteTariffs.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteTariffs: Could not create message: ' + e.message)
			}
		},
		
		queryAllTariffResponse({ value }: queryAllTariffResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryAllTariffResponse", value: QueryAllTariffResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTariffResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressByIdrequest({ value }: queryGetAddressByIdrequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetAddressByIDRequest", value: QueryGetAddressByIDRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressByIDRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressResponse({ value }: queryGetAddressResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetAddressResponse", value: QueryGetAddressResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTariffs({ value }: msgCreateTariffsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgCreateTariffs", value: MsgCreateTariffs.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTariffs: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTariffsResponse({ value }: msgCreateTariffsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgCreateTariffsResponse", value: MsgCreateTariffsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTariffsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressesResponse({ value }: queryGetAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetAddressesResponse", value: QueryGetAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllAddressesRequest({ value }: queryAllAddressesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryAllAddressesRequest", value: QueryAllAddressesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllAddressesRequest: Could not create message: ' + e.message)
			}
		},
		
		tariff({ value }: tariffParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.Tariff", value: Tariff.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Tariff: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateAddresses({ value }: msgUpdateAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgUpdateAddresses", value: MsgUpdateAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateAddresses: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteTariffsResponse({ value }: msgDeleteTariffsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgDeleteTariffsResponse", value: MsgDeleteTariffsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteTariffsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTariffsRequest({ value }: queryGetTariffsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetTariffsRequest", value: QueryGetTariffsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTariffsRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAddressesResponse({ value }: msgCreateAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgCreateAddressesResponse", value: MsgCreateAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllTariffRequest({ value }: queryAllTariffRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryAllTariffRequest", value: QueryAllTariffRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTariffRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateTariffsResponse({ value }: msgUpdateTariffsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgUpdateTariffsResponse", value: MsgUpdateTariffsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateTariffsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressesRequest({ value }: queryGetAddressesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetAddressesRequest", value: QueryGetAddressesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressesRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateTariffs({ value }: msgUpdateTariffsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgUpdateTariffs", value: MsgUpdateTariffs.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateTariffs: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryAllTariffsRequest({ value }: queryAllTariffsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryAllTariffsRequest", value: QueryAllTariffsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTariffsRequest: Could not create message: ' + e.message)
			}
		},
		
		tariffs({ value }: tariffsParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.Tariffs", value: Tariffs.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Tariffs: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAddresses({ value }: msgCreateAddressesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgCreateAddresses", value: MsgCreateAddresses.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAddresses: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAddressRequest({ value }: queryGetAddressRequestParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.QueryGetAddressRequest", value: QueryGetAddressRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAddressRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateAddressesResponse({ value }: msgUpdateAddressesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.MsgUpdateAddressesResponse", value: MsgUpdateAddressesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateAddressesResponse: Could not create message: ' + e.message)
			}
		},
		
		fees({ value }: feesParams): EncodeObject {
			try {
				return { typeUrl: "/stwartchain.feepolicy.Fees", value: Fees.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Fees: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			StwartchainFeepolicy: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;