// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/users/unique_users.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UniqueUsers struct {
	Date                string               `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	UniqueUserAddresses *UniqueUserAddresses `protobuf:"bytes,2,opt,name=uniqueUserAddresses,proto3" json:"uniqueUserAddresses,omitempty"`
}

func (m *UniqueUsers) Reset()         { *m = UniqueUsers{} }
func (m *UniqueUsers) String() string { return proto.CompactTextString(m) }
func (*UniqueUsers) ProtoMessage()    {}
func (*UniqueUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ef46af788d86a92, []int{0}
}
func (m *UniqueUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniqueUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniqueUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueUsers.Merge(m, src)
}
func (m *UniqueUsers) XXX_Size() int {
	return m.Size()
}
func (m *UniqueUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueUsers.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueUsers proto.InternalMessageInfo

func (m *UniqueUsers) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *UniqueUsers) GetUniqueUserAddresses() *UniqueUserAddresses {
	if m != nil {
		return m.UniqueUserAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*UniqueUsers)(nil), "stwartchain.users.UniqueUsers")
}

func init() {
	proto.RegisterFile("stwartchain/users/unique_users.proto", fileDescriptor_7ef46af788d86a92)
}

var fileDescriptor_7ef46af788d86a92 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x2e, 0x29, 0x4f,
	0x2c, 0x2a, 0x49, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0x2d, 0x4e, 0x2d, 0x2a, 0xd6, 0x2f, 0xcd,
	0xcb, 0x2c, 0x2c, 0x4d, 0x8d, 0x07, 0x73, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x04, 0x91,
	0x54, 0xe9, 0x81, 0x25, 0xa4, 0x74, 0xf1, 0x6a, 0x8c, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e,
	0x4e, 0x85, 0x9a, 0xa0, 0x54, 0xcd, 0xc5, 0x1d, 0x0a, 0x96, 0x0e, 0x05, 0x29, 0x15, 0x12, 0xe2,
	0x62, 0x49, 0x49, 0x2c, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x22,
	0xb8, 0x84, 0x4b, 0xe1, 0x4a, 0x1c, 0x61, 0xfa, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0xd4,
	0xf4, 0x30, 0x9c, 0xa0, 0x17, 0x8a, 0xa9, 0x3a, 0x08, 0x9b, 0x11, 0x4e, 0xd1, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e,
	0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xe5, 0x98, 0x9e, 0x59, 0x92, 0x93, 0x98, 0xa4, 0x57,
	0x5c, 0x92, 0x98, 0x03, 0x32, 0x5e, 0xaf, 0x24, 0x35, 0x39, 0x43, 0x3f, 0x33, 0x2b, 0x33, 0x5f,
	0x3f, 0x17, 0xe4, 0xb1, 0xa4, 0xc4, 0xe4, 0xec, 0xd4, 0xbc, 0x14, 0x7d, 0x88, 0xe5, 0xba, 0x10,
	0xdf, 0x56, 0x40, 0xfd, 0x5b, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6, 0xa0, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x9c, 0xb3, 0xae, 0x09, 0x4a, 0x01, 0x00, 0x00,
}

func (m *UniqueUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueUserAddresses != nil {
		{
			size, err := m.UniqueUserAddresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUniqueUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintUniqueUsers(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUniqueUsers(dAtA []byte, offset int, v uint64) int {
	offset -= sovUniqueUsers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UniqueUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovUniqueUsers(uint64(l))
	}
	if m.UniqueUserAddresses != nil {
		l = m.UniqueUserAddresses.Size()
		n += 1 + l + sovUniqueUsers(uint64(l))
	}
	return n
}

func sovUniqueUsers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUniqueUsers(x uint64) (n int) {
	return sovUniqueUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UniqueUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUniqueUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniqueUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniqueUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniqueUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueUserAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniqueUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUniqueUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUniqueUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UniqueUserAddresses == nil {
				m.UniqueUserAddresses = &UniqueUserAddresses{}
			}
			if err := m.UniqueUserAddresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUniqueUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUniqueUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUniqueUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUniqueUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUniqueUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUniqueUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUniqueUsers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUniqueUsers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUniqueUsers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUniqueUsers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUniqueUsers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUniqueUsers = fmt.Errorf("proto: unexpected end of group")
)
