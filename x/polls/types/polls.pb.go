// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stwartchain/polls/polls.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Polls struct {
	Id                  uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title               string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description         string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProposerAddress     string       `protobuf:"bytes,4,opt,name=proposerAddress,proto3" json:"proposerAddress,omitempty"`
	VotingStartTime     string       `protobuf:"bytes,5,opt,name=votingStartTime,proto3" json:"votingStartTime,omitempty"`
	VotingEndTime       string       `protobuf:"bytes,6,opt,name=votingEndTime,proto3" json:"votingEndTime,omitempty"`
	VotingPeriod        string       `protobuf:"bytes,7,opt,name=votingPeriod,proto3" json:"votingPeriod,omitempty"`
	MinVoteAmount       []types.Coin `protobuf:"bytes,8,rep,name=minVoteAmount,proto3" json:"minVoteAmount"`
	Status              string       `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	FailureReason       string       `protobuf:"bytes,10,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	MinAddressesCount   uint64       `protobuf:"varint,11,opt,name=minAddressesCount,proto3" json:"minAddressesCount,omitempty"`
	MinVotedCoinsAmount []types.Coin `protobuf:"bytes,12,rep,name=minVotedCoinsAmount,proto3" json:"minVotedCoinsAmount"`
	Options             []*Options   `protobuf:"bytes,13,rep,name=options,proto3" json:"options,omitempty"`
}

func (m *Polls) Reset()         { *m = Polls{} }
func (m *Polls) String() string { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()    {}
func (*Polls) Descriptor() ([]byte, []int) {
	return fileDescriptor_eabf102d7c03b82e, []int{0}
}
func (m *Polls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Polls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Polls.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Polls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Polls.Merge(m, src)
}
func (m *Polls) XXX_Size() int {
	return m.Size()
}
func (m *Polls) XXX_DiscardUnknown() {
	xxx_messageInfo_Polls.DiscardUnknown(m)
}

var xxx_messageInfo_Polls proto.InternalMessageInfo

func (m *Polls) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Polls) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Polls) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Polls) GetProposerAddress() string {
	if m != nil {
		return m.ProposerAddress
	}
	return ""
}

func (m *Polls) GetVotingStartTime() string {
	if m != nil {
		return m.VotingStartTime
	}
	return ""
}

func (m *Polls) GetVotingEndTime() string {
	if m != nil {
		return m.VotingEndTime
	}
	return ""
}

func (m *Polls) GetVotingPeriod() string {
	if m != nil {
		return m.VotingPeriod
	}
	return ""
}

func (m *Polls) GetMinVoteAmount() []types.Coin {
	if m != nil {
		return m.MinVoteAmount
	}
	return nil
}

func (m *Polls) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Polls) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *Polls) GetMinAddressesCount() uint64 {
	if m != nil {
		return m.MinAddressesCount
	}
	return 0
}

func (m *Polls) GetMinVotedCoinsAmount() []types.Coin {
	if m != nil {
		return m.MinVotedCoinsAmount
	}
	return nil
}

func (m *Polls) GetOptions() []*Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*Polls)(nil), "stwartchain.polls.Polls")
}

func init() { proto.RegisterFile("stwartchain/polls/polls.proto", fileDescriptor_eabf102d7c03b82e) }

var fileDescriptor_eabf102d7c03b82e = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0x8c, 0xd3, 0x24, 0xa5, 0x9b, 0x06, 0xd4, 0xa5, 0x42, 0x4b, 0x24, 0xdc, 0xa8, 0xe2, 0x90,
	0x03, 0xac, 0x55, 0xe0, 0x05, 0xd2, 0xaa, 0x67, 0x8a, 0x41, 0x1c, 0xe0, 0xb4, 0xb6, 0x97, 0x74,
	0xc1, 0xde, 0xcf, 0xda, 0xfd, 0x52, 0xe0, 0x2d, 0x78, 0x0d, 0xde, 0xa4, 0xc7, 0x1e, 0x39, 0x21,
	0x94, 0xbc, 0x08, 0xda, 0x1f, 0xa4, 0x26, 0xe1, 0xd0, 0x8b, 0xe5, 0x9d, 0x99, 0xef, 0xfb, 0x46,
	0xa3, 0x21, 0x4f, 0x2c, 0x7e, 0x15, 0x06, 0xcb, 0x4b, 0xa1, 0x74, 0xd6, 0x42, 0x5d, 0xdb, 0xf0,
	0xe5, 0xad, 0x01, 0x04, 0x7a, 0x70, 0x8b, 0xe6, 0x9e, 0x18, 0x1f, 0x6d, 0x4f, 0x40, 0x8b, 0x0a,
	0x74, 0x9c, 0x19, 0x1f, 0xce, 0x61, 0x0e, 0xfe, 0x37, 0x73, 0x7f, 0x11, 0x4d, 0x4b, 0xb0, 0x0d,
	0xd8, 0xac, 0x10, 0x56, 0x66, 0x57, 0x27, 0x85, 0x44, 0x71, 0x92, 0x95, 0xe0, 0xd6, 0x3a, 0xfe,
	0xf8, 0x67, 0x8f, 0xf4, 0x2f, 0xdc, 0x36, 0x7a, 0x9f, 0x74, 0x55, 0xc5, 0x92, 0x49, 0x32, 0xed,
	0xe5, 0x5d, 0x55, 0xd1, 0x43, 0xd2, 0x47, 0x85, 0xb5, 0x64, 0xdd, 0x49, 0x32, 0xdd, 0xcb, 0xc3,
	0x83, 0x4e, 0xc8, 0xb0, 0x92, 0xb6, 0x34, 0xca, 0xdf, 0x66, 0x3b, 0x9e, 0xbb, 0x0d, 0xd1, 0x29,
	0x79, 0xd0, 0x1a, 0x68, 0xc1, 0x4a, 0x33, 0xab, 0x2a, 0x23, 0xad, 0x65, 0x3d, 0xaf, 0xda, 0x84,
	0x9d, 0xf2, 0x0a, 0x50, 0xe9, 0xf9, 0x5b, 0x14, 0x06, 0xdf, 0xa9, 0x46, 0xb2, 0x7e, 0x50, 0x6e,
	0xc0, 0xf4, 0x29, 0x19, 0x05, 0xe8, 0x5c, 0x57, 0x5e, 0x37, 0xf0, 0xba, 0x75, 0x90, 0x1e, 0x93,
	0xfd, 0x00, 0x5c, 0x48, 0xa3, 0xa0, 0x62, 0xbb, 0x5e, 0xb4, 0x86, 0xd1, 0x73, 0x32, 0x6a, 0x94,
	0x7e, 0x0f, 0x28, 0x67, 0x0d, 0x2c, 0x34, 0xb2, 0x7b, 0x93, 0x9d, 0xe9, 0xf0, 0xc5, 0x63, 0x1e,
	0x72, 0xe2, 0x2e, 0x27, 0x1e, 0x73, 0xe2, 0x67, 0xa0, 0xf4, 0x69, 0xef, 0xfa, 0xf7, 0x51, 0x27,
	0x5f, 0x9f, 0xa2, 0x8f, 0xc8, 0xc0, 0xa2, 0xc0, 0x85, 0x65, 0x7b, 0xfe, 0x48, 0x7c, 0x39, 0xa3,
	0x9f, 0x84, 0xaa, 0x17, 0x46, 0xe6, 0x52, 0x58, 0xd0, 0x8c, 0x04, 0xa3, 0x6b, 0x20, 0x7d, 0x46,
	0x0e, 0x1a, 0xa5, 0x63, 0x0c, 0xd2, 0x9e, 0x79, 0x23, 0x43, 0x9f, 0xfc, 0x36, 0x41, 0xdf, 0x90,
	0x87, 0xf1, 0x78, 0xe5, 0x0c, 0xd9, 0x68, 0x7c, 0xff, 0x6e, 0xc6, 0xff, 0x37, 0x4b, 0x5f, 0x91,
	0xdd, 0x58, 0x1e, 0x36, 0xf2, 0x6b, 0xc6, 0x7c, 0xab, 0x71, 0xfc, 0x75, 0x50, 0xe4, 0xff, 0xa4,
	0xa7, 0x1f, 0xaf, 0x97, 0x69, 0x72, 0xb3, 0x4c, 0x93, 0x3f, 0xcb, 0x34, 0xf9, 0xb1, 0x4a, 0x3b,
	0x37, 0xab, 0xb4, 0xf3, 0x6b, 0x95, 0x76, 0x3e, 0xcc, 0xe6, 0x0a, 0x6b, 0x51, 0x70, 0x8b, 0xa2,
	0x76, 0x6b, 0x38, 0xca, 0xf2, 0x32, 0x53, 0x9f, 0x15, 0x64, 0x8d, 0xeb, 0x6b, 0x21, 0xca, 0x2f,
	0x52, 0x57, 0x59, 0x38, 0xf2, 0x3c, 0x94, 0xf8, 0x5b, 0xac, 0x31, 0x7e, 0x6f, 0xa5, 0x2d, 0x06,
	0xbe, 0x8f, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x21, 0x1b, 0x77, 0xb9, 0x1a, 0x03, 0x00,
	0x00,
}

func (m *Polls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Polls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Polls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolls(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.MinVotedCoinsAmount) > 0 {
		for iNdEx := len(m.MinVotedCoinsAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinVotedCoinsAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolls(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.MinAddressesCount != 0 {
		i = encodeVarintPolls(dAtA, i, uint64(m.MinAddressesCount))
		i--
		dAtA[i] = 0x58
	}
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MinVoteAmount) > 0 {
		for iNdEx := len(m.MinVoteAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinVoteAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolls(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.VotingPeriod) > 0 {
		i -= len(m.VotingPeriod)
		copy(dAtA[i:], m.VotingPeriod)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.VotingPeriod)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VotingEndTime) > 0 {
		i -= len(m.VotingEndTime)
		copy(dAtA[i:], m.VotingEndTime)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.VotingEndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VotingStartTime) > 0 {
		i -= len(m.VotingStartTime)
		copy(dAtA[i:], m.VotingStartTime)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.VotingStartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProposerAddress) > 0 {
		i -= len(m.ProposerAddress)
		copy(dAtA[i:], m.ProposerAddress)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.ProposerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPolls(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPolls(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolls(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolls(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Polls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPolls(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	l = len(m.ProposerAddress)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	l = len(m.VotingStartTime)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	l = len(m.VotingEndTime)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	l = len(m.VotingPeriod)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	if len(m.MinVoteAmount) > 0 {
		for _, e := range m.MinVoteAmount {
			l = e.Size()
			n += 1 + l + sovPolls(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovPolls(uint64(l))
	}
	if m.MinAddressesCount != 0 {
		n += 1 + sovPolls(uint64(m.MinAddressesCount))
	}
	if len(m.MinVotedCoinsAmount) > 0 {
		for _, e := range m.MinVotedCoinsAmount {
			l = e.Size()
			n += 1 + l + sovPolls(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovPolls(uint64(l))
		}
	}
	return n
}

func sovPolls(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolls(x uint64) (n int) {
	return sovPolls(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Polls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Polls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Polls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVoteAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVoteAmount = append(m.MinVoteAmount, types.Coin{})
			if err := m.MinVoteAmount[len(m.MinVoteAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAddressesCount", wireType)
			}
			m.MinAddressesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAddressesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVotedCoinsAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVotedCoinsAmount = append(m.MinVotedCoinsAmount, types.Coin{})
			if err := m.MinVotedCoinsAmount[len(m.MinVotedCoinsAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolls
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &Options{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolls(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolls
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolls
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolls
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolls
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolls
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolls        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolls          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolls = fmt.Errorf("proto: unexpected end of group")
)
