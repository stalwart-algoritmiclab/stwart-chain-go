// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package core

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_DailyStats_1_list)(nil)

type _DailyStats_1_list struct {
	list *[]*v1beta1.Coin
}

func (x *_DailyStats_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DailyStats_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DailyStats_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_DailyStats_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DailyStats_1_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DailyStats_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DailyStats_1_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DailyStats_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_DailyStats_3_list)(nil)

type _DailyStats_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_DailyStats_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DailyStats_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DailyStats_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_DailyStats_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DailyStats_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DailyStats_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DailyStats_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DailyStats_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_DailyStats_5_list)(nil)

type _DailyStats_5_list struct {
	list *[]*v1beta1.Coin
}

func (x *_DailyStats_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DailyStats_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DailyStats_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_DailyStats_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DailyStats_5_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DailyStats_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DailyStats_5_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DailyStats_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DailyStats               protoreflect.MessageDescriptor
	fd_DailyStats_issuedCoins   protoreflect.FieldDescriptor
	fd_DailyStats_countIssued   protoreflect.FieldDescriptor
	fd_DailyStats_burnedCoins   protoreflect.FieldDescriptor
	fd_DailyStats_countBurned   protoreflect.FieldDescriptor
	fd_DailyStats_withdrawCoins protoreflect.FieldDescriptor
	fd_DailyStats_countWithdraw protoreflect.FieldDescriptor
)

func init() {
	file_stwartchain_core_daily_stats_proto_init()
	md_DailyStats = File_stwartchain_core_daily_stats_proto.Messages().ByName("DailyStats")
	fd_DailyStats_issuedCoins = md_DailyStats.Fields().ByName("issuedCoins")
	fd_DailyStats_countIssued = md_DailyStats.Fields().ByName("countIssued")
	fd_DailyStats_burnedCoins = md_DailyStats.Fields().ByName("burnedCoins")
	fd_DailyStats_countBurned = md_DailyStats.Fields().ByName("countBurned")
	fd_DailyStats_withdrawCoins = md_DailyStats.Fields().ByName("withdrawCoins")
	fd_DailyStats_countWithdraw = md_DailyStats.Fields().ByName("countWithdraw")
}

var _ protoreflect.Message = (*fastReflection_DailyStats)(nil)

type fastReflection_DailyStats DailyStats

func (x *DailyStats) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DailyStats)(x)
}

func (x *DailyStats) slowProtoReflect() protoreflect.Message {
	mi := &file_stwartchain_core_daily_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DailyStats_messageType fastReflection_DailyStats_messageType
var _ protoreflect.MessageType = fastReflection_DailyStats_messageType{}

type fastReflection_DailyStats_messageType struct{}

func (x fastReflection_DailyStats_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DailyStats)(nil)
}
func (x fastReflection_DailyStats_messageType) New() protoreflect.Message {
	return new(fastReflection_DailyStats)
}
func (x fastReflection_DailyStats_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DailyStats
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DailyStats) Descriptor() protoreflect.MessageDescriptor {
	return md_DailyStats
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DailyStats) Type() protoreflect.MessageType {
	return _fastReflection_DailyStats_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DailyStats) New() protoreflect.Message {
	return new(fastReflection_DailyStats)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DailyStats) Interface() protoreflect.ProtoMessage {
	return (*DailyStats)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DailyStats) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.IssuedCoins) != 0 {
		value := protoreflect.ValueOfList(&_DailyStats_1_list{list: &x.IssuedCoins})
		if !f(fd_DailyStats_issuedCoins, value) {
			return
		}
	}
	if x.CountIssued != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountIssued)
		if !f(fd_DailyStats_countIssued, value) {
			return
		}
	}
	if len(x.BurnedCoins) != 0 {
		value := protoreflect.ValueOfList(&_DailyStats_3_list{list: &x.BurnedCoins})
		if !f(fd_DailyStats_burnedCoins, value) {
			return
		}
	}
	if x.CountBurned != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountBurned)
		if !f(fd_DailyStats_countBurned, value) {
			return
		}
	}
	if len(x.WithdrawCoins) != 0 {
		value := protoreflect.ValueOfList(&_DailyStats_5_list{list: &x.WithdrawCoins})
		if !f(fd_DailyStats_withdrawCoins, value) {
			return
		}
	}
	if x.CountWithdraw != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CountWithdraw)
		if !f(fd_DailyStats_countWithdraw, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DailyStats) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stwartchain.core.DailyStats.issuedCoins":
		return len(x.IssuedCoins) != 0
	case "stwartchain.core.DailyStats.countIssued":
		return x.CountIssued != uint64(0)
	case "stwartchain.core.DailyStats.burnedCoins":
		return len(x.BurnedCoins) != 0
	case "stwartchain.core.DailyStats.countBurned":
		return x.CountBurned != uint64(0)
	case "stwartchain.core.DailyStats.withdrawCoins":
		return len(x.WithdrawCoins) != 0
	case "stwartchain.core.DailyStats.countWithdraw":
		return x.CountWithdraw != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.core.DailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.core.DailyStats does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DailyStats) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stwartchain.core.DailyStats.issuedCoins":
		x.IssuedCoins = nil
	case "stwartchain.core.DailyStats.countIssued":
		x.CountIssued = uint64(0)
	case "stwartchain.core.DailyStats.burnedCoins":
		x.BurnedCoins = nil
	case "stwartchain.core.DailyStats.countBurned":
		x.CountBurned = uint64(0)
	case "stwartchain.core.DailyStats.withdrawCoins":
		x.WithdrawCoins = nil
	case "stwartchain.core.DailyStats.countWithdraw":
		x.CountWithdraw = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.core.DailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.core.DailyStats does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DailyStats) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stwartchain.core.DailyStats.issuedCoins":
		if len(x.IssuedCoins) == 0 {
			return protoreflect.ValueOfList(&_DailyStats_1_list{})
		}
		listValue := &_DailyStats_1_list{list: &x.IssuedCoins}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.core.DailyStats.countIssued":
		value := x.CountIssued
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.core.DailyStats.burnedCoins":
		if len(x.BurnedCoins) == 0 {
			return protoreflect.ValueOfList(&_DailyStats_3_list{})
		}
		listValue := &_DailyStats_3_list{list: &x.BurnedCoins}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.core.DailyStats.countBurned":
		value := x.CountBurned
		return protoreflect.ValueOfUint64(value)
	case "stwartchain.core.DailyStats.withdrawCoins":
		if len(x.WithdrawCoins) == 0 {
			return protoreflect.ValueOfList(&_DailyStats_5_list{})
		}
		listValue := &_DailyStats_5_list{list: &x.WithdrawCoins}
		return protoreflect.ValueOfList(listValue)
	case "stwartchain.core.DailyStats.countWithdraw":
		value := x.CountWithdraw
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.core.DailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.core.DailyStats does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DailyStats) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stwartchain.core.DailyStats.issuedCoins":
		lv := value.List()
		clv := lv.(*_DailyStats_1_list)
		x.IssuedCoins = *clv.list
	case "stwartchain.core.DailyStats.countIssued":
		x.CountIssued = value.Uint()
	case "stwartchain.core.DailyStats.burnedCoins":
		lv := value.List()
		clv := lv.(*_DailyStats_3_list)
		x.BurnedCoins = *clv.list
	case "stwartchain.core.DailyStats.countBurned":
		x.CountBurned = value.Uint()
	case "stwartchain.core.DailyStats.withdrawCoins":
		lv := value.List()
		clv := lv.(*_DailyStats_5_list)
		x.WithdrawCoins = *clv.list
	case "stwartchain.core.DailyStats.countWithdraw":
		x.CountWithdraw = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.core.DailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.core.DailyStats does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DailyStats) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stwartchain.core.DailyStats.issuedCoins":
		if x.IssuedCoins == nil {
			x.IssuedCoins = []*v1beta1.Coin{}
		}
		value := &_DailyStats_1_list{list: &x.IssuedCoins}
		return protoreflect.ValueOfList(value)
	case "stwartchain.core.DailyStats.burnedCoins":
		if x.BurnedCoins == nil {
			x.BurnedCoins = []*v1beta1.Coin{}
		}
		value := &_DailyStats_3_list{list: &x.BurnedCoins}
		return protoreflect.ValueOfList(value)
	case "stwartchain.core.DailyStats.withdrawCoins":
		if x.WithdrawCoins == nil {
			x.WithdrawCoins = []*v1beta1.Coin{}
		}
		value := &_DailyStats_5_list{list: &x.WithdrawCoins}
		return protoreflect.ValueOfList(value)
	case "stwartchain.core.DailyStats.countIssued":
		panic(fmt.Errorf("field countIssued of message stwartchain.core.DailyStats is not mutable"))
	case "stwartchain.core.DailyStats.countBurned":
		panic(fmt.Errorf("field countBurned of message stwartchain.core.DailyStats is not mutable"))
	case "stwartchain.core.DailyStats.countWithdraw":
		panic(fmt.Errorf("field countWithdraw of message stwartchain.core.DailyStats is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.core.DailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.core.DailyStats does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DailyStats) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stwartchain.core.DailyStats.issuedCoins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_DailyStats_1_list{list: &list})
	case "stwartchain.core.DailyStats.countIssued":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.core.DailyStats.burnedCoins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_DailyStats_3_list{list: &list})
	case "stwartchain.core.DailyStats.countBurned":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stwartchain.core.DailyStats.withdrawCoins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_DailyStats_5_list{list: &list})
	case "stwartchain.core.DailyStats.countWithdraw":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stwartchain.core.DailyStats"))
		}
		panic(fmt.Errorf("message stwartchain.core.DailyStats does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DailyStats) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stwartchain.core.DailyStats", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DailyStats) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DailyStats) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DailyStats) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DailyStats) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DailyStats)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.IssuedCoins) > 0 {
			for _, e := range x.IssuedCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountIssued != 0 {
			n += 1 + runtime.Sov(uint64(x.CountIssued))
		}
		if len(x.BurnedCoins) > 0 {
			for _, e := range x.BurnedCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountBurned != 0 {
			n += 1 + runtime.Sov(uint64(x.CountBurned))
		}
		if len(x.WithdrawCoins) > 0 {
			for _, e := range x.WithdrawCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CountWithdraw != 0 {
			n += 1 + runtime.Sov(uint64(x.CountWithdraw))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DailyStats)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CountWithdraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountWithdraw))
			i--
			dAtA[i] = 0x30
		}
		if len(x.WithdrawCoins) > 0 {
			for iNdEx := len(x.WithdrawCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.WithdrawCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.CountBurned != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountBurned))
			i--
			dAtA[i] = 0x20
		}
		if len(x.BurnedCoins) > 0 {
			for iNdEx := len(x.BurnedCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BurnedCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.CountIssued != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CountIssued))
			i--
			dAtA[i] = 0x10
		}
		if len(x.IssuedCoins) > 0 {
			for iNdEx := len(x.IssuedCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.IssuedCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DailyStats)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DailyStats: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DailyStats: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuedCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IssuedCoins = append(x.IssuedCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IssuedCoins[len(x.IssuedCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountIssued", wireType)
				}
				x.CountIssued = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountIssued |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnedCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BurnedCoins = append(x.BurnedCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BurnedCoins[len(x.BurnedCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountBurned", wireType)
				}
				x.CountBurned = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountBurned |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WithdrawCoins = append(x.WithdrawCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WithdrawCoins[len(x.WithdrawCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountWithdraw", wireType)
				}
				x.CountWithdraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CountWithdraw |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: stwartchain/core/daily_stats.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DailyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuedCoins   []*v1beta1.Coin `protobuf:"bytes,1,rep,name=issuedCoins,proto3" json:"issuedCoins,omitempty"`
	CountIssued   uint64          `protobuf:"varint,2,opt,name=countIssued,proto3" json:"countIssued,omitempty"`
	BurnedCoins   []*v1beta1.Coin `protobuf:"bytes,3,rep,name=burnedCoins,proto3" json:"burnedCoins,omitempty"`
	CountBurned   uint64          `protobuf:"varint,4,opt,name=countBurned,proto3" json:"countBurned,omitempty"`
	WithdrawCoins []*v1beta1.Coin `protobuf:"bytes,5,rep,name=withdrawCoins,proto3" json:"withdrawCoins,omitempty"`
	CountWithdraw uint64          `protobuf:"varint,6,opt,name=countWithdraw,proto3" json:"countWithdraw,omitempty"`
}

func (x *DailyStats) Reset() {
	*x = DailyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stwartchain_core_daily_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyStats) ProtoMessage() {}

// Deprecated: Use DailyStats.ProtoReflect.Descriptor instead.
func (*DailyStats) Descriptor() ([]byte, []int) {
	return file_stwartchain_core_daily_stats_proto_rawDescGZIP(), []int{0}
}

func (x *DailyStats) GetIssuedCoins() []*v1beta1.Coin {
	if x != nil {
		return x.IssuedCoins
	}
	return nil
}

func (x *DailyStats) GetCountIssued() uint64 {
	if x != nil {
		return x.CountIssued
	}
	return 0
}

func (x *DailyStats) GetBurnedCoins() []*v1beta1.Coin {
	if x != nil {
		return x.BurnedCoins
	}
	return nil
}

func (x *DailyStats) GetCountBurned() uint64 {
	if x != nil {
		return x.CountBurned
	}
	return 0
}

func (x *DailyStats) GetWithdrawCoins() []*v1beta1.Coin {
	if x != nil {
		return x.WithdrawCoins
	}
	return nil
}

func (x *DailyStats) GetCountWithdraw() uint64 {
	if x != nil {
		return x.CountWithdraw
	}
	return 0
}

var File_stwartchain_core_daily_stats_proto protoreflect.FileDescriptor

var file_stwartchain_core_daily_stats_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x02, 0x0a,
	0x0a, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x42, 0xab, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x77, 0x61, 0x72,
	0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0f, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x74, 0x77, 0x61, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0xca, 0x02, 0x10, 0x53, 0x74, 0x77,
	0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0xe2, 0x02, 0x1c,
	0x53, 0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x6f, 0x72, 0x65,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53,
	0x74, 0x77, 0x61, 0x72, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stwartchain_core_daily_stats_proto_rawDescOnce sync.Once
	file_stwartchain_core_daily_stats_proto_rawDescData = file_stwartchain_core_daily_stats_proto_rawDesc
)

func file_stwartchain_core_daily_stats_proto_rawDescGZIP() []byte {
	file_stwartchain_core_daily_stats_proto_rawDescOnce.Do(func() {
		file_stwartchain_core_daily_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_stwartchain_core_daily_stats_proto_rawDescData)
	})
	return file_stwartchain_core_daily_stats_proto_rawDescData
}

var file_stwartchain_core_daily_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_stwartchain_core_daily_stats_proto_goTypes = []interface{}{
	(*DailyStats)(nil),   // 0: stwartchain.core.DailyStats
	(*v1beta1.Coin)(nil), // 1: cosmos.base.v1beta1.Coin
}
var file_stwartchain_core_daily_stats_proto_depIdxs = []int32{
	1, // 0: stwartchain.core.DailyStats.issuedCoins:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: stwartchain.core.DailyStats.burnedCoins:type_name -> cosmos.base.v1beta1.Coin
	1, // 2: stwartchain.core.DailyStats.withdrawCoins:type_name -> cosmos.base.v1beta1.Coin
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_stwartchain_core_daily_stats_proto_init() }
func file_stwartchain_core_daily_stats_proto_init() {
	if File_stwartchain_core_daily_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stwartchain_core_daily_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stwartchain_core_daily_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stwartchain_core_daily_stats_proto_goTypes,
		DependencyIndexes: file_stwartchain_core_daily_stats_proto_depIdxs,
		MessageInfos:      file_stwartchain_core_daily_stats_proto_msgTypes,
	}.Build()
	File_stwartchain_core_daily_stats_proto = out.File
	file_stwartchain_core_daily_stats_proto_rawDesc = nil
	file_stwartchain_core_daily_stats_proto_goTypes = nil
	file_stwartchain_core_daily_stats_proto_depIdxs = nil
}
